<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>正则表达式的常用功能</title>
    <url>/2020/02/21/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<blockquote>
<p>过滤，选取有用的文本内容</p>
<p>校验密码</p>
<p>检测输入网址</p>
<p>检测日期</p>
<p>移除注释</p>
<p>匹配HTML前后标签</p>
</blockquote>
<a id="more"></a>

<h2 id="1-过滤，选取有用的文本信息"><a href="#1-过滤，选取有用的文本信息" class="headerlink" title="1.过滤，选取有用的文本信息"></a>1.过滤，选取有用的文本信息</h2><p>如果想要选取所有数字信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">test=input()</span><br><span class="line">x=<span class="string">r'\d+'</span></span><br><span class="line">out=re.finditer(x,test)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> out:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>如果想要获取所有网址信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">test=input()</span><br><span class="line">x=<span class="string">r'https.+\w*com'</span></span><br><span class="line">out=re.finditer(x,test)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> out:</span><br><span class="line">    print(i.group())</span><br></pre></td></tr></table></figure>



<h2 id="2-校验密码"><a href="#2-校验密码" class="headerlink" title="2. 校验密码"></a>2. 校验密码</h2><p>如果想要校验密码，要求是包含数字，大小写字母，可以使用特殊字符，长度为6-12：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">test=input(<span class="string">"请输入密码："</span>)</span><br><span class="line">a=<span class="string">r'(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[\S]&#123;6,12&#125;'</span></span><br><span class="line">out=re.search(a,test)</span><br><span class="line"><span class="keyword">if</span> out==<span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">'NO'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"OK"</span>)</span><br></pre></td></tr></table></figure>



<h2 id="3-检测输入网址"><a href="#3-检测输入网址" class="headerlink" title="3. 检测输入网址"></a>3. 检测输入网址</h2><p>要求格式：</p>
<blockquote>
<p><a href="https://www.xxx.com" target="_blank" rel="noopener">https://www.xxx.com</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">test=input(<span class="string">"请输入网址："</span>)</span><br><span class="line">a=<span class="string">r'https://w&#123;3&#125;\..+\.com'</span></span><br><span class="line">m=re.match(a,test)</span><br><span class="line"><span class="keyword">if</span> m==<span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">'no'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"OK"</span>)</span><br></pre></td></tr></table></figure>



<h2 id="4-检测日期"><a href="#4-检测日期" class="headerlink" title="4. 检测日期"></a>4. 检测日期</h2><p>要求日期格式：</p>
<blockquote>
<p>yyyy-mm-dd  </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">test=input(<span class="string">"请输入日期："</span>)</span><br><span class="line">a=<span class="string">r'\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;'</span></span><br><span class="line">m=re.match(a,test)</span><br><span class="line"><span class="keyword">if</span> m==<span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">'no'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>



<h2 id="5-移除注释"><a href="#5-移除注释" class="headerlink" title="5. 移除注释"></a>5. 移除注释</h2><p>注释类型：</p>
<blockquote>
<p> # 。。。。。。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">test=input(<span class="string">"请输入："</span>)</span><br><span class="line">a=<span class="string">r'#.+'</span></span><br><span class="line">out=re.sub(a,<span class="string">''</span>,test)</span><br><span class="line">print(out)</span><br></pre></td></tr></table></figure>



<h2 id="6-匹配HTML前后标签"><a href="#6-匹配HTML前后标签" class="headerlink" title="6. 匹配HTML前后标签"></a>6. 匹配HTML前后标签</h2><p>要求前后一致</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">test=input(<span class="string">"请输入："</span>)</span><br><span class="line">a=<span class="string">r'&lt;(.+)&gt;.+&lt;\1&gt;</span></span><br><span class="line"><span class="string">out=re.match(a,test)</span></span><br><span class="line"><span class="string">print(out)</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/02/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><strong><a href="https://baike.baidu.com/item/正则表达式/1700215?fr=aladdin" target="_blank" rel="noopener">网络介绍(正则表达式)</a></strong></p>
<p>正则表达式可以实现文本的查找和字符串的替换，远比字符串自身提供的方法实现简单快捷的多。</p>
<p>python中的正则表达式应用于数据挖掘，数据分析，网络爬虫等等。而python中也提供了正则表达式的re模块。</p>
<h3 id="正则表达式字符串："><a href="#正则表达式字符串：" class="headerlink" title="正则表达式字符串："></a>正则表达式字符串：</h3><p>正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合，是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。（反正我是看不懂这段解释的）</p>
<h4 id="1-普通字符："><a href="#1-普通字符：" class="headerlink" title="1. 普通字符："></a>1. 普通字符：</h4><p>普通字符是按照字符字面意义表示的字符，包括没有显式指定为元字符的所有可打印和不可打印字符。包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>
<h4 id="2-元字符："><a href="#2-元字符：" class="headerlink" title="2. 元字符："></a>2. 元字符：</h4><p>元字符是预先定义好的一些特殊字符。</p>
<h4 id="3-字符转义："><a href="#3-字符转义：" class="headerlink" title="3. 字符转义："></a>3. 字符转义：</h4><p>在正则表达式中需要字符转义，与python中字符转义是类似的。如果想要表示任何语言的单词字符，可以在单词w前加上反斜杠(\)。</p>
<p>对于字符转义，不单单可以对普通字符进行转义，也可以对基本元字符进行转义。例如点(.)字符，如果希望按照字面的意义使用，可以在前面加上反斜杠。</p>
<h3 id="元字符："><a href="#元字符：" class="headerlink" title="元字符："></a>元字符：</h3><h4 id="元字符列表"><a href="#元字符列表" class="headerlink" title="元字符列表"></a><a href="https://www.runoob.com/regexp/regexp-metachar.html" target="_blank" rel="noopener">元字符列表</a></h4><p>常用元字符：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>转义符，表示转义</td>
</tr>
<tr>
<td>.</td>
<td>表示任意一个字符</td>
</tr>
<tr>
<td>*</td>
<td>表示重复零次或多次</td>
</tr>
<tr>
<td>?</td>
<td>表示重复零次或一次</td>
</tr>
<tr>
<td>|</td>
<td>指明两项之间的一个选择</td>
</tr>
<tr>
<td>+</td>
<td>表示重复一次或多次</td>
</tr>
<tr>
<td>{ }</td>
<td>定义量词</td>
</tr>
<tr>
<td>[ ]</td>
<td>定义字符串</td>
</tr>
<tr>
<td>( )</td>
<td>定义分组</td>
</tr>
<tr>
<td>^</td>
<td>可以表示取反，也表示匹配输入字符串的开始位置</td>
</tr>
<tr>
<td>$</td>
<td>表示匹配字符串的结尾位置</td>
</tr>
</tbody></table>
<p>例如：</p>
<blockquote>
<p>hell*o，可以匹配到helo，或者hellllllo(字母l出现零次或者多次)</p>
<p>hell+o,可以匹配到helllo，或者helllllllo(字母l出现一次或者多次)</p>
</blockquote>
<h3 id="开始与结束字符："><a href="#开始与结束字符：" class="headerlink" title="开始与结束字符："></a>开始与结束字符：</h3><p>元字符中的^与$字符，有着特殊的意义，如果使用^与$字符，则要求被匹配的源字符串的开头语结尾都与匹配查询的字符串一样。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a1=<span class="string">'\w+rror'</span>  <span class="comment"># \w表示任意字符</span></span><br><span class="line">a2=<span class="string">'^e+rror$'</span></span><br><span class="line"><span class="comment"># a1与a2不相同</span></span><br><span class="line">test=<span class="string">'never make eeeeeerrors'</span></span><br><span class="line">m=re.search(a1,test)</span><br><span class="line"><span class="comment"># 调用re模块中的search方法，如果找到匹配的就返回匹配对象，如果没找到，就返回None</span></span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a2,test)</span><br><span class="line">print(m)</span><br><span class="line">test2=<span class="string">'eeeerror'</span></span><br><span class="line">m=research(a2,test2)</span><br><span class="line">print(m)</span><br><span class="line">------------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">11</span>, <span class="number">21</span>), match=<span class="string">'eeeeeerror'</span>&gt;</span><br><span class="line"><span class="literal">None</span>   <span class="comment"># 未匹配到就输出None</span></span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">8</span>), match=<span class="string">'eeeerror'</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>正则表达式可以使用字符类，一个字符类可以定义一组字符，其中任意一个字符出现在输入的字符串中就匹配成功。</p>
<h4 id="定义字符类："><a href="#定义字符类：" class="headerlink" title="定义字符类："></a>定义字符类：</h4><p>定义一个普通的字符类需要使用’[ ]’元字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">'[Pp]ython'</span></span><br><span class="line"><span class="comment"># 匹配Python或者python</span></span><br><span class="line">test=<span class="string">'python is the best!'</span></span><br><span class="line">m=re.search(a,test)</span><br><span class="line">print(m)</span><br><span class="line">-----------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">6</span>), match=<span class="string">'python'</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="字符类取反："><a href="#字符类取反：" class="headerlink" title="字符类取反："></a>字符类取反：</h4><p>有时需要在正则表达式中指定不存在的字符，可以在该字符前加上’^’元字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">'[^123]'</span>  <span class="comment"># 匹配非123的其他字符</span></span><br><span class="line">test1=<span class="string">'1木头人'</span></span><br><span class="line">test2=<span class="string">'2木头人'</span></span><br><span class="line">test3=<span class="string">'3木头人'</span></span><br><span class="line">test4=<span class="string">'123木头人'</span></span><br><span class="line">test5=<span class="string">'木头人'</span></span><br><span class="line">m=re.search(a,test1)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test2)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test3)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test4)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test5)</span><br><span class="line">print(m)</span><br><span class="line">---------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">1</span>, <span class="number">2</span>), match=<span class="string">'木'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">1</span>, <span class="number">2</span>), match=<span class="string">'木'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">1</span>, <span class="number">2</span>), match=<span class="string">'木'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">3</span>, <span class="number">4</span>), match=<span class="string">'木'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">1</span>), match=<span class="string">'木'</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="区间："><a href="#区间：" class="headerlink" title="区间："></a>区间：</h4><p>如果想要匹配或者非匹配一段连续的数字，可以直接写’[12345]’/&#39;[^12345]&#39;表示匹配或者不匹配一到五之间的数字，包括一和五，还可以简化的用区间表示：[1-5]/ [ ^1-5]。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">'[1-5]'</span></span><br><span class="line">test1=<span class="string">'12345'</span></span><br><span class="line">test2=<span class="string">'235'</span></span><br><span class="line">test3=<span class="string">'木头人12345'</span></span><br><span class="line">test4=<span class="string">'1-5'</span></span><br><span class="line">m=re.search(a,test1)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test2)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test3)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test4)</span><br><span class="line">print(m)</span><br><span class="line">--------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">1</span>), match=<span class="string">'1'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">1</span>), match=<span class="string">'2'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">3</span>, <span class="number">4</span>), match=<span class="string">'1'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">1</span>), match=<span class="string">'1'</span>&gt;</span><br><span class="line"><span class="comment"># 字符类匹配只匹配一个字符</span></span><br></pre></td></tr></table></figure>

<p>区间同样可以表示连续的字母：[a-z]，[A-Z]。</p>
<p>此外区间也可以表示多个区间：[0-35-9]表示零到三和五到九的区间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">'[0-35-9]'</span></span><br><span class="line">test1=<span class="string">'hi 4'</span></span><br><span class="line">test2=<span class="string">'hi 2'</span></span><br><span class="line">test3=<span class="string">'hi 5'</span></span><br><span class="line">m=re.search(a,test1)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test2)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test3)</span><br><span class="line">print(m)</span><br><span class="line">----------</span><br><span class="line"><span class="literal">None</span>  <span class="comment"># 4不在区间内</span></span><br><span class="line">&lt;re.Match object; span=(<span class="number">3</span>, <span class="number">4</span>), match=<span class="string">'2'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">3</span>, <span class="number">4</span>), match=<span class="string">'5'</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="常用字符类："><a href="#常用字符类：" class="headerlink" title="常用字符类："></a>常用字符类：</h4><p>有一些字符很常用，所以正则表达式里提供了预定义的字符类。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td>\\</td>
<td>匹配反斜杠</td>
</tr>
<tr>
<td>\n</td>
<td>匹配换行</td>
</tr>
<tr>
<td>\r</td>
<td>匹配回车</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个竖直制表符</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个水平制表符</td>
</tr>
<tr>
<td>\s</td>
<td>匹配一个空格</td>
</tr>
<tr>
<td>\S</td>
<td>匹配一个非空格符，相当于[^\s]</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字，相当与[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字，相当于[^\d]</td>
</tr>
<tr>
<td>\w</td>
<td>匹配任意语言的任意字符</td>
</tr>
<tr>
<td>\W</td>
<td>相当于[^\w]</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a1=<span class="string">'\whihi'</span></span><br><span class="line">a2=<span class="string">'\d'</span></span><br><span class="line">test=<span class="string">'123hihi'</span></span><br><span class="line">m=re.search(a1,test)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a2,test)</span><br><span class="line">print(m)</span><br><span class="line">------------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">2</span>, <span class="number">7</span>), match=<span class="string">'3hihi'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">1</span>), match=<span class="string">'1'</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>在使用正则表达式时，如果想要匹配显示多次字符或者字符串，可以使用量词。（元字符中已列出）</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>表示重复零次或多次</td>
</tr>
<tr>
<td>？</td>
<td>表示重复零次或一次</td>
</tr>
<tr>
<td>+</td>
<td>表示重复一次或多次</td>
</tr>
<tr>
<td>{n}</td>
<td>出现n次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>出现n-m次</td>
</tr>
<tr>
<td>{n,}</td>
<td>至少出现n次</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a1=<span class="string">'e+rror'</span></span><br><span class="line">a2=<span class="string">'e&#123;1&#125;rror'</span></span><br><span class="line">a3=<span class="string">'e?rror'</span></span><br><span class="line">test=<span class="string">'take a eeeerror,have many errors'</span></span><br><span class="line">m=re.search(a1,test)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a2,test)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a3,test)</span><br><span class="line">print(m)</span><br><span class="line">-------------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">7</span>, <span class="number">15</span>), match=<span class="string">'eeeerror'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">10</span>, <span class="number">15</span>), match=<span class="string">'error'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">10</span>, <span class="number">15</span>), match=<span class="string">'error'</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="贪婪量词和懒惰量词："><a href="#贪婪量词和懒惰量词：" class="headerlink" title="贪婪量词和懒惰量词："></a>贪婪量词和懒惰量词：</h4><p>贪婪量词是指尽可能多的匹配，而懒惰量词是指尽可能少的匹配。</p>
<p>一般正则表达式默认使用贪婪量词，如果想用懒惰量词，可以在后面加上‘？’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">'\d&#123;2,5&#125;'</span>    <span class="comment"># 表示匹配二到五个数字,一般默认会匹配最多的个数</span></span><br><span class="line">test=<span class="string">'12333'</span></span><br><span class="line">m=re.search(a,test)   <span class="comment"># 匹配最多的结果，五个数字</span></span><br><span class="line">print(m)</span><br><span class="line">a1=<span class="string">'\d&#123;2,5&#125;?'</span>   <span class="comment"># 设置为懒惰量词，尽可能少的匹配数字个数</span></span><br><span class="line">m=re.search(a1,test)   <span class="comment"># 匹配最少的结果，两个数字</span></span><br><span class="line">print(m)</span><br><span class="line">-------------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">'12333'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">2</span>), match=<span class="string">'12'</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>先前的正则表达式的匹配都是单个单个字符匹配下去，如果希望一组字符作为整体进行匹配，需要用到分组’( )‘。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">'(hi)&#123;2&#125;'</span>  <span class="comment"># 匹配出现两次的'hi'，将‘hi'作为一组匹配内容</span></span><br><span class="line">test=<span class="string">"hi world,hi hi world,hihi world"</span></span><br><span class="line">m=re.search(a,test)</span><br><span class="line">print(m)</span><br><span class="line">print(m.group())   <span class="comment"># 返回匹配字符串</span></span><br><span class="line">print(m.groups())   <span class="comment"># 获得所有组内容</span></span><br><span class="line">---------------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">21</span>, <span class="number">25</span>), match=<span class="string">'hihi'</span>&gt;</span><br><span class="line">hihi</span><br><span class="line">(<span class="string">'hi'</span>,)</span><br></pre></td></tr></table></figure>

<h4 id="分组命名："><a href="#分组命名：" class="headerlink" title="分组命名："></a>分组命名：</h4><p>对于正则表达式访问分组时，除了可以使用分组编号来访问，也可以通过设置分组名，调用分组名查看。命名规则：</p>
<blockquote>
<p>?P&lt;分组命&gt;分组内容</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">'(?P&lt;gp1&gt;\w&#123;3,4&#125;)-(?P&lt;gp2&gt;\d&#123;7,8&#125;)'</span> </span><br><span class="line"><span class="comment"># 设置两个分组，一个是任意三到四个字符，一个是七到八个数字</span></span><br><span class="line">test=<span class="string">'asd-111223456'</span></span><br><span class="line">m=re.search(a,test)</span><br><span class="line">print(m)</span><br><span class="line">print(m.group())</span><br><span class="line">print(m.groups())</span><br><span class="line">print(m.group(<span class="string">'gp1'</span>)) <span class="comment"># 通过组名来调出匹配内容</span></span><br><span class="line">print(m.group(<span class="string">'gp2'</span>))</span><br><span class="line">----------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">12</span>), match=<span class="string">'asd-11122345'</span>&gt;</span><br><span class="line">asd<span class="number">-11122345</span></span><br><span class="line">(<span class="string">'asd'</span>, <span class="string">'11122345'</span>)</span><br><span class="line">asd</span><br><span class="line"><span class="number">11122345</span></span><br></pre></td></tr></table></figure>

<h4 id="反向引用分组："><a href="#反向引用分组：" class="headerlink" title="反向引用分组："></a>反向引用分组：</h4><p>正则表达式可以访问匹配之前的分组，即先前已经匹配过的内容，以免匹配的对象格式相同但是内容存在差异而不被察觉。</p>
<p>这时候就可以反向引用分组，让第二组反向引用第一组，只需要将第二组修改为’\组编号’，组编号从1开始。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">r'\[(\d)\]前面是第一组，后面是第二组\[(\d)\]'</span></span><br><span class="line"><span class="comment"># 没有使用反向引用,这是使用'\[\]’表示单纯使用方括号，不是使用正则表达式中的量词符号</span></span><br><span class="line">test=<span class="string">'[1]前面是第一组，后面是第二组[1]'</span>  <span class="comment"># 要求前后方括号中内容一样</span></span><br><span class="line">m=re.search(a,test)</span><br><span class="line">print(m)</span><br><span class="line">print(m.groups())</span><br><span class="line">test1=<span class="string">'[1]前面是第一组，后面是第二组[2]'</span>  <span class="comment"># 可是结构一样，内容不一样时</span></span><br><span class="line">m=re.search(a,test1)</span><br><span class="line">print(m)</span><br><span class="line">print(m.groups())</span><br><span class="line">-------------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">19</span>), match=<span class="string">'[1]前面是第一组，后面是第二组[1]'</span>&gt;</span><br><span class="line">(<span class="string">'1'</span>, <span class="string">'1'</span>)</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">19</span>), match=<span class="string">'[1]前面是第一组，后面是第二组[2]'</span>&gt;</span><br><span class="line">(<span class="string">'1'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="comment">#  第二次匹配并没有出错，但我们原本的意思是要前后方括号中的字符一样。</span></span><br><span class="line">=========================可以用反向引用解决这个问题</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">r'\[(\d)\]前面是第一组，后面是第二组\[\1\]'</span></span><br><span class="line"><span class="comment"># 没有使用反向引用,这是使用'\[\]’表示单纯使用方括号，不是使用正则表达式中的量词符号</span></span><br><span class="line"><span class="comment"># \1表示和前面第一组的内容一样</span></span><br><span class="line">test=<span class="string">'[1]前面是第一组，后面是第二组[1]'</span>  <span class="comment"># 要求前后方括号中内容一样</span></span><br><span class="line">m=re.search(a,test)</span><br><span class="line">print(m)</span><br><span class="line">print(m.groups())</span><br><span class="line">test1=<span class="string">'[1]前面是第一组，后面是第二组[2]'</span>  <span class="comment"># 可是结构一样，内容不一样时</span></span><br><span class="line">m=re.search(a,test1)</span><br><span class="line">print(m)</span><br><span class="line">-----------------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">19</span>), match=<span class="string">'[1]前面是第一组，后面是第二组[1]'</span>&gt;</span><br><span class="line">(<span class="string">'1'</span>,)</span><br><span class="line"><span class="literal">None</span>  <span class="comment"># 第二次匹配出错。</span></span><br></pre></td></tr></table></figure>

<h4 id="非捕获分组："><a href="#非捕获分组：" class="headerlink" title="非捕获分组："></a>非捕获分组：</h4><p>一个正则表达式添加圆括号，做成分组，将导致相关匹配存储到一个临时缓冲区中，即被捕获，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <strong>\n</strong> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>
<p>可以使用非捕获元字符 <strong>?:</strong>、<strong>?=</strong> 或 <strong>?!</strong> 来重写捕获，忽略对相关匹配的保存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">r'\w\.(jpg)'</span></span><br><span class="line">test=<span class="string">r'1.jpg,2.png'</span></span><br><span class="line"><span class="comment"># 捕获</span></span><br><span class="line">m=re.search(a,test)</span><br><span class="line">print(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非捕获</span></span><br><span class="line">a=<span class="string">r'\w\.(?:jpg)'</span></span><br><span class="line">m=re.search(a,test)</span><br><span class="line">print(m)</span><br><span class="line">-----------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">'1.jpg'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">'1.jpg'</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p>re模块是python的正则表达式模块，包含许多相关函数。</p>
<h4 id="search函数和match函数："><a href="#search函数和match函数：" class="headerlink" title="search函数和match函数："></a>search函数和match函数：</h4><blockquote>
<p>search函数是在输入的字符串中查找需要匹配的对象，如果找到，就返回第一个，如果找不到就返回None。</p>
<p>match函数是再输入字符串的开头开始查照，是否匹配，相当于匹配的内容加上了开始（^)一样，开头需要匹配。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line">a=<span class="string">r'a\w+a'</span></span><br><span class="line">test1=<span class="string">'hi alia'</span></span><br><span class="line">test2=<span class="string">'alia hi'</span></span><br><span class="line">m=re.search(a,test1)   </span><br><span class="line">print(m)</span><br><span class="line">m=re.match(a,test1)</span><br><span class="line">print(m)</span><br><span class="line">m=re.search(a,test2)</span><br><span class="line">print(m)</span><br><span class="line">m=re.match(a,test2)</span><br><span class="line">print(m)</span><br><span class="line">----------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">3</span>, <span class="number">7</span>), match=<span class="string">'alia'</span>&gt;</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">4</span>), match=<span class="string">'alia'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">4</span>), match=<span class="string">'alia'</span>&gt;</span><br></pre></td></tr></table></figure>

<p>match的对象自身包含一些方法:</p>
<blockquote>
<p>group()：返回匹配的字符串</p>
<p>start()：返回子字符串的开始索引</p>
<p>end()：返回子字符串的结束索引</p>
<p>span()：返回子字符串的跨度</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">x=<span class="string">r'www\.\w*\.com'</span></span><br><span class="line">test=<span class="string">'welcome to www.baidu.com!'</span></span><br><span class="line">m=re.search(x,test)</span><br><span class="line">print(m)</span><br><span class="line">print(m.group())</span><br><span class="line">print(m.start())</span><br><span class="line">print(m.end())</span><br><span class="line">print(m.span())</span><br><span class="line">-----------------------</span><br><span class="line">&lt;re.Match object; span=(<span class="number">11</span>, <span class="number">24</span>), match=<span class="string">'www.baidu.com'</span>&gt;</span><br><span class="line">www.baidu.com</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line">(<span class="number">11</span>, <span class="number">24</span>)</span><br></pre></td></tr></table></figure>

<h4 id="findall-和finditer-函数："><a href="#findall-和finditer-函数：" class="headerlink" title="findall()和finditer()函数："></a>findall()和finditer()函数：</h4><blockquote>
<p>findall()：在输入的字符串中查找全部匹配的对象，如果找到，就返回匹配的对象列表，如果找不到，就返回None</p>
<p>finditer()：在输入的字符串中查找全部匹配的对象，如果找到，就返回容纳match对象的可迭代对象，如果没有九返回None</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">r'\w*\.com'</span></span><br><span class="line">test1=<span class="string">'welcom to baidu.com and xinlang.com and qq.com'</span></span><br><span class="line">m=re.findall(a,test1)</span><br><span class="line">print(m)</span><br><span class="line">m=re.finditer(a,test1)</span><br><span class="line">print(m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    print(i)</span><br><span class="line">--------------------</span><br><span class="line">[<span class="string">'baidu.com'</span>, <span class="string">'xinlang.com'</span>, <span class="string">'qq.com'</span>]</span><br><span class="line">&lt;callable_iterator object at <span class="number">0x0000028C31DF3970</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">10</span>, <span class="number">19</span>), match=<span class="string">'baidu.com'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">24</span>, <span class="number">35</span>), match=<span class="string">'xinlang.com'</span>&gt;</span><br><span class="line">&lt;re.Match object; span=(<span class="number">40</span>, <span class="number">46</span>), match=<span class="string">'qq.com'</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="字符串分割："><a href="#字符串分割：" class="headerlink" title="字符串分割："></a>字符串分割：</h4><p>re模块中的字符串分隔，是指按照匹配对象来分割输入的字符串，使用split()函数：</p>
<blockquote>
<p>re.split(match,string,maxsplit=0,flags=0)</p>
<p>match指正则表达式，string表示输入的字符串，maxsplit表示最多切割次数，默认值是0，表示没有限制，flags表示编译标志。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">r'\.'</span></span><br><span class="line">test=<span class="string">'hi.monday.i.like.you'</span></span><br><span class="line">m=re.split(a,test)</span><br><span class="line">print(m)</span><br><span class="line">m=re.split(a,test,maxsplit=<span class="number">1</span>)</span><br><span class="line">print(m)</span><br><span class="line">m=re.split(a,test,maxsplit=<span class="number">4</span>)</span><br><span class="line">print(m)     <span class="comment"># 最多分割四次，超出后没有作用</span></span><br><span class="line">m=re.split(a,test,maxsplit=<span class="number">5</span>)</span><br><span class="line">print(m)</span><br><span class="line">-----------------------</span><br><span class="line">[<span class="string">'hi'</span>, <span class="string">'monday'</span>, <span class="string">'i'</span>, <span class="string">'like'</span>, <span class="string">'you'</span>]</span><br><span class="line">[<span class="string">'hi'</span>, <span class="string">'monday.i.like.you'</span>]</span><br><span class="line">[<span class="string">'hi'</span>, <span class="string">'monday'</span>, <span class="string">'i'</span>, <span class="string">'like'</span>, <span class="string">'you'</span>]</span><br><span class="line">[<span class="string">'hi'</span>, <span class="string">'monday'</span>, <span class="string">'i'</span>, <span class="string">'like'</span>, <span class="string">'you'</span>]</span><br></pre></td></tr></table></figure>

<h4 id="字符串替换："><a href="#字符串替换：" class="headerlink" title="字符串替换："></a>字符串替换：</h4><p>字符串替换使用sub函数，返回替换后的字符串</p>
<blockquote>
<p>re.sub(match,get,string,count=0,flags=0)</p>
<p>match是指匹配对象，get是指替换对象，string是指输入的字符串，count是指替换的最大数量，默认值是0，表示没有限制。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">r'\.com'</span></span><br><span class="line">test=<span class="string">'welcom to baidu.com and qq.com'</span></span><br><span class="line">m=re.sub(a,<span class="string">'.cn'</span>,test)</span><br><span class="line">print(m)</span><br><span class="line">m=re.sub(a,<span class="string">'.cn'</span>,test,count=<span class="number">1</span>)</span><br><span class="line">print(m)</span><br><span class="line">----------------------</span><br><span class="line">welcom to baidu.cn <span class="keyword">and</span> qq.cn</span><br><span class="line">welcom to baidu.cn <span class="keyword">and</span> qq.com</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>因为爱，所以幸福</title>
    <url>/2020/02/18/%E5%9B%A0%E4%B8%BA%E7%88%B1%EF%BC%8C%E6%89%80%E4%BB%A5%E5%B9%B8%E7%A6%8F/</url>
    <content><![CDATA[<h1 id="因为爱，所以幸福"><a href="#因为爱，所以幸福" class="headerlink" title="因为爱，所以幸福"></a>因为爱，所以幸福</h1><p>在很久很久以前，你拥有我，我拥有你。</p>
<a id="more"></a>

<h2 id="一-初识"><a href="#一-初识" class="headerlink" title="一. 初识"></a>一. 初识</h2><p>​    那是一个天晴的时刻，在南方人眼中，天气就像是一个人的心情，总会在你开心的时候大放光彩。对于B来说，这确实一个符合他心情的天气，一个让人开心的时刻。难得的一个江苏高中的假日，B自然想要好好让放松一下自己多日的紧张学习生活。</p>
<p>​    摆脱了没日没夜的做题答题时间，B选择去逛一逛许就没去的商城，看看有没有自己喜欢的玩具，如果能淘到一个，那会让他开心上一个星期。</p>
<p>​    “草帽哎!”B在商城里竟然看到了自己小时候在乡下经常编的草帽，想起自己小时候为了帮家人分担一些家务，常常夜里陪着家人一起编制草帽的生活，立马激动不已。然而正当他想要上前去买下草帽时，一个芳龄约18的小女孩突然出现在小摊的前面，买下了B想要买的草帽。B连忙找到那个女孩，想要从她的手里买下那个他心动不已的草帽。结果女孩说什么也不想卖，哪怕是他出了双倍的价格。</p>
<p>​    交易无果的B只能扫兴离去，也没了再逛商场的兴趣。但在后来的上学期间，他时常会想起，那个女孩拿着草帽，一副誓死也不愿卖出草帽的模样。</p>
<h2 id="二-再遇"><a href="#二-再遇" class="headerlink" title="二. 再遇"></a>二. 再遇</h2><p>​    紧张刺激的高考结束了，B结束了自己的高中学习生涯，他并没有为自己的高考顺利而感到高兴，反而忧心忡忡。他知道自己的家庭不可能再支持他进行接下来的学习，高中的繁重学费已经让他的父母付出了十倍的辛苦。大学学费显然不是他们家庭所能够支付的。</p>
<p>​    果不其然，在一个繁星点点的夜晚，平静的水面上飘荡着一只船，父亲满含风霜的脸上留下了B一生难忘的眼泪，那是他唯一一次见过父亲在他面前哭泣，因为愧疚。</p>
<p>​    在高考成绩公布后，B并没有选择适合自己的大学，而是在自己家亲戚的帮助下，选择了一所职业学校，他想要尽快学会一门技能，尽快出去打工工作赚钱，为家里分担一部分支出。</p>
<p>​    转眼职校的平淡生活已经过去两年，他在好友的陪伴下，再次来到了那个让他曾经数次回忆的商城。见到原来卖草帽的小摊，他又想起了那个倔强的小姑娘，心里莫名冒出了一丝期待，至于期待什么，他也无法说明，是期待那个姑娘还是能再买到一顶草帽？</p>
<p>​    逛了半天的商城，朋友已经买到了自己想要的东西，而B依旧两手空空，觉得没什么需要的，B和朋友决定回去了。</p>
<p>​    正当他们来到商城的出口，B眼前一亮，他看到了自己原来遇见的那个姑娘，过去了三年，她依旧那么年轻秀气。这一刻，B明白了自己一直期待的是什么。他在朋友诧异的眼神下来到了姑娘的面前，询问她是否还记得自己。那姑娘想了半天，直到B提及原来买卖草帽的事情才想起他。</p>
<p>​    “抱歉啊，当时是我看到草帽，想起了在家里的母亲，才会不转卖草帽的。”姑娘不好意思的向B解释道。</p>
<p>​    “不，今天我不是来说那件事的，我。。。“B面对这个期待的姑娘莫名紧张了起来，“我，我想认识一下你，可以吗？我叫B。”B鼓起勇气，表达了自己的心意。</p>
<p>​    “嗯。”姑娘显然是被B的突然一句话给震住了，她羞红了耳朵，慢慢说出了自己的名字，“我叫小平。”</p>
<p>​    B没想到自己的搭话没有被对方回绝，一时间兴奋不已，拿出了手机，和对方互换了号码。两人完全不顾B的朋友，自顾自的聊起了天，还约定了以后短信联系。直到天色渐晚，B才在朋友的提醒下离开。而小平则是满心欢喜的回家了。</p>
<h2 id="三-约定"><a href="#三-约定" class="headerlink" title="三. 约定"></a>三. 约定</h2><p>​    在之后的日子里，B每天上学的下课之余都在和小平聊天。原来小平因为家境的原因早早的就不上学了，一直在打小工，而逛商城是她最开心的兴趣爱好。</p>
<p>​    在短信交谈了两个月后，B再次约小平出来见面，小平也是欣然答应了。</p>
<p>​    在星期六的下午，商场门口，B见到了打扮的美美的小平，这时他只觉得这是他最爱的女生。</p>
<p>​    他与小平逛了半天的街，买了好多的可爱小玩偶送给了小平。当他们找到一家小饭馆吃晚饭的时候，B再也忍不住的向小平表了白，小平并没有拒绝，而是在脸红了半天后答应了B。B只觉得自己幸福到了极点，一个爱与被爱的女生，答应了他。</p>
<p>​    在接下来的日子里，B一边忙着学习，一边忙着与小平过着幸福的情侣生活。虽然辛苦，但是B总是感到幸福满满。</p>
<p>​    时间转眼即逝，B职业学校毕业了。他需要离开这里，去大城市里打工，赚取家用。但是他怎么也舍不得小平。在他即将离去前一天，他找到了小平，告诉了她自己要离开自己的决定。</p>
<p>​    小平在木楞一会以后，竟然决定跟他一走出去打工，两人一起生活，B顿时流下了眼泪，他知道这是一个深爱着自己的女生，一个愿意为了他而过艰苦生活的女生。</p>
<p>​    坐在离去的大巴车上，B紧紧握着小平的手，说道：“我会给你一个幸福的生活的！”，小平没有说话，只是握紧了B的手。</p>
<h2 id="四-间隙"><a href="#四-间隙" class="headerlink" title="四. 间隙"></a>四. 间隙</h2><p>​    B并没有食言，他来到大城市打拼了十年，从一个默默无闻的打工仔做到了一家厂房的老板。他把老家的房子重新装修了一番，给了小平一个幸福的生活。</p>
<p>​    在小平生下孩子后，他毅然让小平回家好好带孩子，而自己留下来继续工作，他需要的不仅仅是给小平一个幸福生活，还有孩子的幸福生活！</p>
<p>​    然而在小平一人在家带孩子的日子里，认识了一个男人。在B不在陪伴的日子里，那个男人给了小平无尽的关怀，最终两人造成了恶果。</p>
<p>​    在孩子高中毕业以后，两人的事情曝光，是那个男人想要破坏小平的生活，一直纠缠小平不放，而小平想要回到原来的生活。</p>
<p>​    B知道这个事情后，一度脸色发白，差点直接住进医院，两人的关系直线恶化，但是小平真的不想离开B，因为她爱着的是B，当初只是她一时冲动犯下的恶果。</p>
<p>​    日子依旧一天天的过着，B估计到两方老人的身体与面子，并没有爆发，将这件事忍了下去，毕竟他还爱着那个姑娘。但两人的生活中总是会有着间隙的存在，关系没有以前那般亲密。</p>
<h2 id="五-因为爱，所以幸福！"><a href="#五-因为爱，所以幸福！" class="headerlink" title="五. 因为爱，所以幸福！"></a>五. 因为爱，所以幸福！</h2><p>​    转眼到了过年的时间，B和小平带着孩子回到老家，陪着老人过年。原本计划过完年十天就回去上班的两人，因为传染病肆虐的缘故，在家逗留，延期了一个月。</p>
<p>​    过完年后的二十几天，正好是B妈妈的生日，这一天B亲自下厨，给妈妈烧了一顿生日餐，并打开了一瓶酒，恭祝妈妈生日快乐。</p>
<p>​    在吃饭吃到最后，妈妈说到，我现在很少喝酒了，但是喝酒后时常会想到你爸爸，原来我们一起喝酒的。</p>
<p>​    B眼睛瞬间湿润了，他端了端酒杯，什么也没说，默默喝下了一口酒，小平见状，拿起酒杯对着B，干起了杯。”现在蛮幸福的！“妈妈在一旁看着儿子与儿媳，眼睛笑开了。B看了看酒杯，看了看小平通红的脸，也是笑着说道”确实很幸福！“，一家人都欢笑了起来。</p>
<p><strong>外面的世界很精彩，但是因为爱，所以很幸福！</strong></p>
]]></content>
      <categories>
        <category>轻小说</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2020/02/16/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li>冒泡排序</li>
<li>选择排序</li>
<li>插入排序</li>
</ul>
<a id="more"></a>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序 是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p>算法描述：</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>重复步骤1~3，直到排序完成。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[]=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">67</span>,<span class="number">4</span>,<span class="number">23</span>,<span class="number">54</span>,<span class="number">75</span>,<span class="number">23</span>,<span class="number">89</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>]));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>]);++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>])<span class="number">-1</span>-i;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x[j+<span class="number">1</span>]&lt;x[j])&#123;</span><br><span class="line">                <span class="keyword">int</span> sam=x[j+<span class="number">1</span>];</span><br><span class="line">                    x[j+<span class="number">1</span>]=x[j];</span><br><span class="line">                    x[j]=sam;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"%5d"</span>,x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">x=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">35</span>,<span class="number">6546</span>,<span class="number">654</span>,<span class="number">232</span>,<span class="number">12</span>,<span class="number">546</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(x)-i<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> x[j+<span class="number">1</span>]&lt;x[j]:</span><br><span class="line">            sam=x[j+<span class="number">1</span>]</span><br><span class="line">            x[j+<span class="number">1</span>]=x[j]</span><br><span class="line">            x[j]=sam</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p> 选择排序(Selection-sort) 是一种简单直观的排序算法。它的工作原理：首先在序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余序列元素中继续寻找最小（大）元素，然后放到剩余序列的起始位置。以此类推，直到所有元素均排序完毕。</p>
<p>算法描述：</p>
<ol>
<li>初始状态：无序区为R[1…n]，有序区为空。</li>
<li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1…i-1]和R(i…n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1…i]和R[i+1…n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区。</li>
<li>n-1趟结束，数组有序化了。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[]=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">67</span>,<span class="number">4</span>,<span class="number">23</span>,<span class="number">54</span>,<span class="number">75</span>,<span class="number">23</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>]));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>]);++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">min</span>=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>]);++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x[j]&lt;x[<span class="built_in">min</span>])&#123;</span><br><span class="line">                <span class="built_in">min</span>=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sam=x[i];</span><br><span class="line">            x[i]=x[<span class="built_in">min</span>];</span><br><span class="line">            x[<span class="built_in">min</span>]=sam;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"%5d"</span>,x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">x=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">35</span>,<span class="number">6546</span>,<span class="number">654</span>,<span class="number">232</span>,<span class="number">12</span>,<span class="number">546</span>,<span class="number">9</span>,<span class="number">12312</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    min=i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i,len(x)):</span><br><span class="line">        <span class="keyword">if</span> x[j]&lt;x[min]:</span><br><span class="line">            min=j</span><br><span class="line">    x[i],x[min]=x[min],x[i]</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>  插入排序（Insertion-Sort） 的算法描述是一种简单直观的排序算法。它是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。<br>具体算法描述如下：</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序.</li>
<li>取出下一个元素，在前面排序的元素序列中从后向前扫描.</li>
<li>如果该元素（前面排查的）大于新元素，将新元素与再前面的元素对比.</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置.</li>
<li>将新元素插入到该位置后.</li>
<li>重复步骤2~5。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[]=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">67</span>,<span class="number">4</span>,<span class="number">23</span>,<span class="number">54</span>,<span class="number">75</span>,<span class="number">23</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>]<span class="number">-1</span>)<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    	<span class="keyword">int</span> n1=x[i+<span class="number">1</span>];</span><br><span class="line">    	<span class="keyword">int</span> nu=i;</span><br><span class="line">    	<span class="keyword">while</span>(nu&gt;=<span class="number">0</span>&amp;&amp;n1&lt;x[nu])&#123;</span><br><span class="line">    		x[nu+<span class="number">1</span>]=x[nu];</span><br><span class="line">    		nu--;</span><br><span class="line">		&#125; </span><br><span class="line">		x[nu+<span class="number">1</span>]=n1;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(x[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"%5d"</span>,x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">x=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">23</span>,<span class="number">546</span>,<span class="number">23</span>,<span class="number">6745</span>,<span class="number">876</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)<span class="number">-1</span>):</span><br><span class="line">    y=x[i+<span class="number">1</span>]</span><br><span class="line">    n=i</span><br><span class="line">    <span class="keyword">while</span> n&gt;=<span class="number">0</span> <span class="keyword">and</span> y&lt;x[n]:</span><br><span class="line">        x[n+<span class="number">1</span>]=x[n]</span><br><span class="line">        n-=<span class="number">1</span></span><br><span class="line">    x[n+<span class="number">1</span>]=y</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>排序</category>
        <category>python</category>
        <category>c</category>
      </categories>
  </entry>
  <entry>
    <title>python常用模块</title>
    <url>/2020/02/15/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="pyhton中常用的模块"><a href="#pyhton中常用的模块" class="headerlink" title="pyhton中常用的模块"></a>pyhton中常用的模块</h1><a id="more"></a>

<h2 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h2><p>math模块进行数学运算，如指数，对数，平方根和三角函数等等。math模块中的函数对象不包括复数，若要进行复数运算，应用cmath模块。</p>
<h3 id="舍入函数："><a href="#舍入函数：" class="headerlink" title="舍入函数："></a>舍入函数：</h3><p>math模块中提供的舍入函数有:math.ceil(a)和math.floor(a)。math.ceil(a)是返回大于或等于a的最小整数，math.floor(a)是返回小于或等于a的最大整数。在python中还存在一个内置函数，不需要调用math模块，直接使用的round(a)函数，对a进行四舍五入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;round(<span class="number">1.2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;round(<span class="number">1.5</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> math</span><br><span class="line">&gt;&gt;&gt;math.ceil(<span class="number">1.2</span>)</span><br><span class="line"><span class="number">2</span>   <span class="comment"># 类似于只取整数部分再加1</span></span><br><span class="line">&gt;&gt;&gt;math.floor(<span class="number">1.5</span>)</span><br><span class="line"><span class="number">1</span>    <span class="comment"># 类似于只取整数部分</span></span><br></pre></td></tr></table></figure>

<h3 id="幂和对数函数："><a href="#幂和对数函数：" class="headerlink" title="幂和对数函数："></a>幂和对数函数：</h3><blockquote>
<p>对数运算：math.log(a,b)  其中a为真数，b为底数。返回以b为底的a的对数值</p>
<p>平方根：math.sqrt(a) 返回a的平方根</p>
<p>幂运算：math.pow(a,b) 返回a的b次幂</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a=<span class="number">4</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line">print(math.log(a,b))</span><br><span class="line">print(math.sqrt(a))</span><br><span class="line">print(math.pow(a,b))</span><br><span class="line">----------------------</span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="number">16.0</span></span><br></pre></td></tr></table></figure>

<h3 id="三角函数："><a href="#三角函数：" class="headerlink" title="三角函数："></a>三角函数：</h3><blockquote>
<p>math.sin(a) : 正弦函数</p>
<p>math.cos(a):  余弦函数</p>
<p>math.tan(a):  正切函数</p>
<p>math.asin(a):  反正弦函数</p>
<p>math.acos(a):  反余弦函数</p>
<p>math.atan(a):   反正切函数</p>
</blockquote>
<p>上述函数中的参数a是弧度，有时需要将弧度转换为角度或将角度转换为弧度：</p>
<blockquote>
<p>math.degrees(a)： 将弧度a转化为角度</p>
<p>math.radians(a)： 将角度a转化为弧度</p>
</blockquote>
<p><strong>math.pi表示三角中的$\pi$</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a=math.degrees(<span class="number">0.5</span>*math.pi)</span><br><span class="line">b=math.radians(<span class="number">90</span>/math.pi)</span><br><span class="line">print(a,b)</span><br><span class="line">-----------------------</span><br><span class="line"><span class="number">90.0</span> <span class="number">0.5</span></span><br><span class="line">================</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a=math.radians(<span class="number">45</span>/math.pi)</span><br><span class="line">print(a)</span><br><span class="line">b=math.sin(a)</span><br><span class="line">print(b)</span><br><span class="line">c=math.asin(b)</span><br><span class="line">print(c)</span><br><span class="line">print(math.tan(a))</span><br><span class="line">-----------------------</span><br><span class="line"><span class="number">0.25</span></span><br><span class="line"><span class="number">0.24740395925452294</span></span><br><span class="line"><span class="number">0.25</span></span><br><span class="line"><span class="number">0.25534192122103627</span></span><br></pre></td></tr></table></figure>

<h2 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h2><p>random模块提供了一些生成随机数的函数。</p>
<blockquote>
<p>random.random()：返回范围大于等于0.0且小于1.0的随机浮点数。</p>
<p>random.randrange(stop)：返回范围大于0且小于stop，步长为1的随机整数。</p>
<p>random.randrange(start,stop[,step])：返回范围大于等于start且小于stop，步长为step的随机整数。</p>
<p>random.randint(a,b)：返回范围大于等于a且小于等于b的随机整数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random1</span><span class="params">()</span>:</span></span><br><span class="line">    x=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        x.append(random.random())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(x) <span class="comment"># 0.0到1.0的随机浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random2</span><span class="params">()</span>:</span></span><br><span class="line">    x=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        x.append(random.randrange(<span class="number">100</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(x)  <span class="comment"># 0到100的随机整数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random3</span><span class="params">()</span>:</span></span><br><span class="line">    x=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        x.append(random.randrange(<span class="number">90</span>,<span class="number">100</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(x)  <span class="comment"># 90到100的随机整数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random4</span><span class="params">()</span>:</span></span><br><span class="line">    x=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        x.append(random.randint(<span class="number">10</span>,<span class="number">30</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(x)  <span class="comment"># 10到30的随机整数</span></span><br><span class="line">random1()</span><br><span class="line">random2()</span><br><span class="line">random3()</span><br><span class="line">random4()</span><br><span class="line">-------------------------</span><br><span class="line">[<span class="number">0.024895930949429435</span>, <span class="number">0.9050858311416454</span>, <span class="number">0.11252800826444875</span>, <span class="number">0.8611396144459876</span>, <span class="number">0.0353702249880371</span>, <span class="number">0.7039905482181432</span>, <span class="number">0.3694177372612416</span>, <span class="number">0.8618463491865753</span>, <span class="number">0.8543634602239153</span>, <span class="number">0.9771965860792426</span>]</span><br><span class="line">[<span class="number">13</span>, <span class="number">47</span>, <span class="number">49</span>, <span class="number">25</span>, <span class="number">64</span>, <span class="number">72</span>, <span class="number">98</span>, <span class="number">73</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">97</span>, <span class="number">93</span>, <span class="number">93</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">90</span>, <span class="number">98</span>, <span class="number">90</span>, <span class="number">96</span>, <span class="number">90</span>]</span><br><span class="line">[<span class="number">27</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">29</span>, <span class="number">29</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure>

<h2 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h2><p>python官方提供的日期和时间模块主要有time和datetime两个模块。time偏重于底层平台，模块中大多数函数会调用本地平台上的C链接库，因此有些函数运行的结果在不同的平台上会有所不同。datetime模块对time模块进行了封装，提供了高级API。</p>
<p>datetime模块中提供了以下5个类：</p>
<blockquote>
<ol>
<li>datetime：包含时间和日期</li>
<li>date：只包含日期</li>
<li>time：只包含时间</li>
<li>timedelta：计算时间跨度</li>
<li>tzinfo：时区信息</li>
</ol>
</blockquote>
<h3 id="datetime类："><a href="#datetime类：" class="headerlink" title="datetime类："></a>datetime类：</h3><p>一个datetime对象可以表示日期和时间等信息，创建datetime对象可以使用如下构造方法;</p>
<blockquote>
<p>datetime.datetime(year,month,day,hour=0,minute=0,second=0,microsecond=0,tzinfo=None)</p>
</blockquote>
<p>其中year month day三个参数是不能省略的，tzinfo指的是时区参数，None表示不指定时区。参数的取值范围是限定的。</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>month</td>
<td>1–12</td>
</tr>
<tr>
<td>day</td>
<td>1–给定年份和月份的日期最大值</td>
</tr>
<tr>
<td>hour</td>
<td>0–23</td>
</tr>
<tr>
<td>minute</td>
<td>0–59</td>
</tr>
<tr>
<td>second</td>
<td>0–59</td>
</tr>
<tr>
<td>microminute</td>
<td>0–1000000</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">a=datetime.datetime(<span class="number">2019</span>,<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">print(a)</span><br><span class="line">b=datetime.datetime(<span class="number">2012</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">23</span>)</span><br><span class="line">------------</span><br><span class="line"><span class="number">2019</span><span class="number">-02</span><span class="number">-12</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">2012</span><span class="number">-02</span><span class="number">-12</span> <span class="number">02</span>:<span class="number">12</span>:<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>如果需要获得本地时间，可以使用datetime中的一些类方法：</p>
<blockquote>
<p>datetime.today()：返回本地当前时间和日期</p>
<p>datetime.now(tz=None)：返回当前本地时间和日期，如果tz为None，其作用相当于today</p>
<p>datetime.utcnow()：返回当前<a href="https://baike.baidu.com/item/协调世界时/787659?fromtitle=UTC&fromid=5899996&fr=aladdin" target="_blank" rel="noopener">UTC</a>日期和时间</p>
<p>datetime.fromtimestamp(timestamp,tz=None)：返回与<a href="https://baike.baidu.com/item/unix时间戳/2078227?fr=aladdin" target="_blank" rel="noopener">UNIX时间戳</a>对应的本地是日期和时间</p>
<p>datetime.utcfromtimestamp(timestamp)：返回与UNIX时间戳对应的UTC日期和时间</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">a=datetime.datetime.today()</span><br><span class="line">b=datetime.datetime.utcnow()</span><br><span class="line">c=datetime.datetime.fromtimestamp(<span class="number">1581658686</span>,tz=<span class="literal">None</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">------------------</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> <span class="number">13</span>:<span class="number">35</span>:<span class="number">55.699281</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> <span class="number">05</span>:<span class="number">35</span>:<span class="number">55.699281</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> <span class="number">13</span>:<span class="number">38</span>:<span class="number">06</span></span><br><span class="line"><span class="comment"># 本地时区是东八区，所以比utc时间多了八个小时</span></span><br></pre></td></tr></table></figure>

<p><strong><a href="https://tool.lu/timestamp/" target="_blank" rel="noopener">时间戳在线转化器</a></strong></p>
<h3 id="date类"><a href="#date类" class="headerlink" title="date类"></a>date类</h3><blockquote>
<p>datetime.date(year,month,day)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">a=datetime.date(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(a)</span><br><span class="line">--------------</span><br><span class="line"><span class="number">2020</span><span class="number">-01</span><span class="number">-02</span></span><br></pre></td></tr></table></figure>

<p>date中存在与datetime同样的类方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.date.today())</span><br><span class="line">---------------</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span></span><br></pre></td></tr></table></figure>

<h3 id="time-类"><a href="#time-类" class="headerlink" title="time 类"></a>time 类</h3><blockquote>
<p>datetime.time(hour=0,minute=0,second=0,microsecond=0,tzinfo=None)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">a=datetime.time(<span class="number">12</span>,<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">print(a)</span><br><span class="line">----------------------</span><br><span class="line"><span class="number">12</span>:<span class="number">02</span>:<span class="number">12</span></span><br></pre></td></tr></table></figure>

<hr>
<p>如果想要获取当天时间的某一个特定值，如day，hour等：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">a=datetime.datetime.today()</span><br><span class="line">print(a.day)</span><br><span class="line">print(<span class="string">"%d:%d:%d"</span>%(a.hour,a.minute,a.second))</span><br><span class="line">----------------------</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">13</span>:<span class="number">53</span>:<span class="number">8</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="日期和时间计算"><a href="#日期和时间计算" class="headerlink" title="日期和时间计算"></a>日期和时间计算</h3><p>datetime.timedelta对象代表两个时间之间的时间差，两个date或datetime对象相减就可以返回一个timedelta对象。<br>如果有人问你昨天是几号，这个很容易就回答出来了。但是如果问你200天前是几号，就不是那么容易答出来。而在Python中datetime模块中的timedelta就可以很轻松给出答案。  </p>
<blockquote>
<p>class datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]]) </p>
</blockquote>
<p>从构造函数的定义中可以看出，所有参数都是可选的，并且默认都是0。参数的值可以是整数，浮点数，正数或负数针对时间存储，timedelta内部只能存储days，seconds，microseconds，其他参数的值会自动按如下规则进行转换： </p>
<blockquote>
<p>1 millisecond（毫秒）-&gt; 1000 microseconds（微秒）<br>1 minute -&gt; 60 seconds<br>1 hour -&gt; 3600 seconds<br>1 week -&gt; 7 days</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">a=datetime.datetime.now()</span><br><span class="line">print(a)</span><br><span class="line">b=datetime.timedelta(days=<span class="number">2</span>)</span><br><span class="line">print(b)</span><br><span class="line">c=datetime.timedelta(seconds=<span class="number">-2</span>)</span><br><span class="line">print(C)</span><br><span class="line">d=a+b</span><br><span class="line">e=a+c</span><br><span class="line">print(d)  <span class="comment"># 两天后的日期和时间</span></span><br><span class="line">print(e)  <span class="comment"># 两秒前的日期和时间</span></span><br><span class="line">-----------</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> <span class="number">14</span>:<span class="number">06</span>:<span class="number">11.287869</span></span><br><span class="line"><span class="number">2</span> days, <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">-1</span> day, <span class="number">23</span>:<span class="number">59</span>:<span class="number">58</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-16</span> <span class="number">14</span>:<span class="number">06</span>:<span class="number">11.287869</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> <span class="number">14</span>:<span class="number">06</span>:<span class="number">09.287869</span></span><br></pre></td></tr></table></figure>

<h3 id="日期和时间的格式化输出"><a href="#日期和时间的格式化输出" class="headerlink" title="日期和时间的格式化输出"></a>日期和时间的格式化输出</h3><p>python中的日期时间格式化使用strftime()方法，datetime，time，date三个类中都含有该方法。而日期时间的解析需要用到datetime.strptime(date_string,format)方法，date和time没有该方法。format表示时间格式。</p>
<table>
<thead>
<tr>
<th>格式控制符</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>%m</td>
<td>两位月份表示</td>
<td>01，10</td>
</tr>
<tr>
<td>%y</td>
<td>两位年份表示</td>
<td>08，20</td>
</tr>
<tr>
<td>%Y</td>
<td>四位年份表示</td>
<td>2012，2000</td>
</tr>
<tr>
<td>%d</td>
<td>月内中的一天</td>
<td>1，10</td>
</tr>
<tr>
<td>%H</td>
<td>两位小时表示（24时）</td>
<td>01，12</td>
</tr>
<tr>
<td>%I</td>
<td>两位小时表示（12时）</td>
<td>01，10</td>
</tr>
<tr>
<td>%p</td>
<td>AM或PM区域性设置</td>
<td>AM和PM</td>
</tr>
<tr>
<td>%M</td>
<td>两位分钟表示</td>
<td>01，23</td>
</tr>
<tr>
<td>%S</td>
<td>两位秒表示</td>
<td>01，23</td>
</tr>
<tr>
<td>%f</td>
<td>以六位数表示微妙</td>
<td>000000</td>
</tr>
<tr>
<td>%z</td>
<td>+HHMM或-HHMM形式的UTC偏移</td>
<td>+1010</td>
</tr>
<tr>
<td>%Z</td>
<td>时区名称</td>
<td>UTC,EST,CST</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">a=datetime.datetime.today()</span><br><span class="line">print(a.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class="line">-----------------</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">13</span></span><br></pre></td></tr></table></figure>

<h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><blockquote>
<p>datetime.timezone(offset,name=None)</p>
</blockquote>
<p>offset是UTC偏移量，+8就是东八区。name参数是时区名字，如Asia/Beijing，可省略。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone,timedelta,datetime</span><br><span class="line">print(datetime.utcnow())</span><br><span class="line">a=timezone(timedelta(hours=<span class="number">8</span>))</span><br><span class="line">b= datetime.utcnow().replace(tzinfo=a)</span><br><span class="line">print(b)</span><br><span class="line">print(datetime.now())</span><br><span class="line">------------------</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> <span class="number">06</span>:<span class="number">44</span>:<span class="number">15.894890</span>   <span class="comment"># utc时间</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> <span class="number">06</span>:<span class="number">44</span>:<span class="number">15.932728</span>+<span class="number">08</span>:<span class="number">00</span>   </span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-14</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">15.941387</span>   <span class="comment"># 东八区区时</span></span><br></pre></td></tr></table></figure>

<h2 id="logging日志模块"><a href="#logging日志模块" class="headerlink" title="logging日志模块"></a>logging日志模块</h2><p>在程序开发过程中，有时会需要输出一些调试信息，此时可以使用logging模块，用于输出运行日志，可以设置输出日志的等级，日志保存路径，时间等等。虽然仍有很多人使用print（）函数输出日志信息，但是无法做到分级输出，且在处理过程中也是十分麻烦。而logging模块可以通过设置不同的日志等级，在release版本中值输出重要信息，而不必显示调试信息，操作灵活。</p>
<h3 id="日志等级："><a href="#日志等级：" class="headerlink" title="日志等级："></a>日志等级：</h3><p>logging模块提供了5种常用级别：</p>
<table>
<thead>
<tr>
<th>日志级别</th>
<th>日志函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>DEBUG</td>
<td>debug()</td>
<td>输出调试信息</td>
</tr>
<tr>
<td>INFO</td>
<td>info()</td>
<td>输出一些关键节点信息，用于确定程序的流程</td>
</tr>
<tr>
<td>WARNING</td>
<td>warning()</td>
<td>输出不影响程序进行的不期望的事情发生时的信息</td>
</tr>
<tr>
<td>ERROR</td>
<td>error()</td>
<td>导致某些功能不能运行时的问题的日志信息</td>
</tr>
<tr>
<td>CRITICAL</td>
<td>critical()</td>
<td>导致应用程序不能继续运行时的问题的日志信息</td>
</tr>
</tbody></table>
<p>这5种级别从上到下依次从低到高，如果设置了DEBUG级别，debug()函数和其他级别函数的日志信息后会被输出；如果设置了ERROR级别，error()和critical()函数的日志信息会被输出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.ERROR)  <span class="comment"># 设置级别为ERROR</span></span><br><span class="line">logging.debug(<span class="string">"1"</span>)</span><br><span class="line">logging.info(<span class="string">"2"</span>)</span><br><span class="line">logging.warning(<span class="string">"3"</span>)</span><br><span class="line">logging.error(<span class="string">"4"</span>)</span><br><span class="line">logging.critical(<span class="string">"5"</span>)</span><br><span class="line">-----------------------</span><br><span class="line">ERROR:root:<span class="number">4</span></span><br><span class="line">CRITICAL:root:<span class="number">5</span>   <span class="comment"># 只执行error函数和critical函数</span></span><br><span class="line">==============================</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)  <span class="comment"># 设置级别为DEBUG</span></span><br><span class="line">logging.debug(<span class="string">"1"</span>)</span><br><span class="line">logging.info(<span class="string">"2"</span>)</span><br><span class="line">logging.warning(<span class="string">"3"</span>)</span><br><span class="line">logging.error(<span class="string">"4"</span>)</span><br><span class="line">logging.critical(<span class="string">"5"</span>)</span><br><span class="line">--------------------------</span><br><span class="line">DEBUG:root:<span class="number">1</span></span><br><span class="line">INFO:root:<span class="number">2</span></span><br><span class="line">WARNING:root:<span class="number">3</span></span><br><span class="line">ERROR:root:<span class="number">4</span></span><br><span class="line">CRITICAL:root:<span class="number">5</span>     <span class="comment"># 全部执行</span></span><br></pre></td></tr></table></figure>

<p>在输出的日hi信息中会有root关键字，这说明进行日志输出的对象是root日志生成器（logger)。也可以使用getLogger()函数创建日志器对象。</p>
<blockquote>
<p>logger=logging.getLogger(_<em>name_</em>)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level = logging.INFO)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"><span class="comment"># 生成日志器对象</span></span><br><span class="line"><span class="comment"># 直接调用日志器对象中的日志函数</span></span><br><span class="line">logger.debug(<span class="string">"Do something"</span>)</span><br><span class="line">logger.info(<span class="string">"Start print log"</span>)</span><br><span class="line">logger.warning(<span class="string">"Something maybe fail."</span>)</span><br><span class="line">--------------------------</span><br><span class="line">INFO:__main__:Start <span class="keyword">print</span> log</span><br><span class="line">WARNING:__main__:Something maybe fail.</span><br></pre></td></tr></table></figure>

<h3 id="日志格式化输出："><a href="#日志格式化输出：" class="headerlink" title="日志格式化输出："></a>日志格式化输出：</h3><font color=green>

<p>%(name)s：日志器名</p>
<p>%(levelno)s：打印日志级别的数值</p>
<p> %(levelname)s：打印日志级别的名称</p>
<p> %(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]</p>
<p> %(filename)s：打印当前执行程序名（包括路径） </p>
<p>%(funcName)s：打印日志的当前函数 名</p>
<p>%(lineno)d：打印日志的当前行号 </p>
<p>%(asctime)s：打印日志的时间 </p>
<p>%(thread)d：打印线程ID</p>
<p> %(threadName)s：打印线程名称</p>
<p> %(process)d：打印进程ID</p>
<p>%(processName)s：打印进程名</p>
<p> %(message)s：打印日志信息</p>
</font>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG,format=<span class="string">'%(asctime)s--%(name)s--%(filename)s--%(levelname)s--%(message)s'</span>)</span><br><span class="line">logger=logging.getLogger(__name__)</span><br><span class="line">logger.debug(<span class="string">"1"</span>)</span><br><span class="line">logger.info(<span class="string">"2"</span>)</span><br><span class="line">logger.warning(<span class="string">"3"</span>)</span><br><span class="line">logger.error(<span class="string">"4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">()</span>:</span></span><br><span class="line">    logger.critical(<span class="string">"5"</span>)</span><br><span class="line">hi()</span><br><span class="line">-----------------------</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">38</span>,<span class="number">394</span>--__main__--mian.py--DEBUG-<span class="number">-1</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">38</span>,<span class="number">432</span>--__main__--mian.py--INFO-<span class="number">-2</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">38</span>,<span class="number">458</span>--__main__--mian.py--WARNING-<span class="number">-3</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">38</span>,<span class="number">472</span>--__main__--mian.py--ERROR-<span class="number">-4</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">38</span>,<span class="number">481</span>--__main__--mian.py--CRITICAL-<span class="number">-5</span></span><br></pre></td></tr></table></figure>

<h3 id="日志输出："><a href="#日志输出：" class="headerlink" title="日志输出："></a>日志输出：</h3><p>日志信息默认输出到控制台，也可以将日志信息输出到日志文件中，或者网络中的其他计算机。</p>
<h4 id="输出到日志文件中："><a href="#输出到日志文件中：" class="headerlink" title="输出到日志文件中："></a>输出到日志文件中：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO,format=<span class="string">'%(asctime)s--%(name)s--%(levelname)s--%(message)s'</span>,filename=<span class="string">'test1.txt'</span>,filemode=<span class="string">'a'</span>)</span><br><span class="line">logger=logging.getLogger(__name__)</span><br><span class="line">logger.debug(<span class="string">"1"</span>)</span><br><span class="line">logger.info(<span class="string">"2"</span>)</span><br><span class="line">logger.warning(<span class="string">"3"</span>)</span><br><span class="line">logger.error(<span class="string">"4"</span>)</span><br><span class="line">logger.critical(<span class="string">"5"</span>)</span><br><span class="line">------------------</span><br><span class="line"><span class="comment"># filename：指定日志文件名，后接的文件名必须是当前目录下存在的文件名，如果存在，就会将日志信息存入其中，而不会输出到控制台</span></span><br><span class="line"><span class="comment">#filemode:有w和a，w就是写模式，每次都会重新写日志，覆盖之前的日志;a是追加模式，默认如果不写的话，就是追加模式.</span></span><br></pre></td></tr></table></figure>

<h4 id="将日志同时输出到屏幕和日志文件："><a href="#将日志同时输出到屏幕和日志文件：" class="headerlink" title="将日志同时输出到屏幕和日志文件："></a>将日志同时输出到屏幕和日志文件：</h4><p>logging库采取了模块化的设计，提供了许多组件：记录器、处理器、过滤器和格式化器。</p>
<ul>
<li>Logger 暴露了应用程序代码能直接使用的接口。</li>
<li>Handler将（记录器产生的）日志记录发送至合适的目的地。</li>
<li>Filter提供了更好的粒度控制，它可以决定输出哪些日志记录。</li>
<li>Formatter 指明了最终输出中日志记录的布局。</li>
</ul>
<p><strong>Loggers</strong>:</p>
<p>Logger 对象要做三件事情。首先，它们向应用代码暴露了许多方法，这样应用可以在运行时记录消息。其次，记录器对象通过严重程度（默认的过滤设施）或者过滤器对象来决定哪些日志消息需要记录下来。第三，记录器对象将相关的日志消息传递给所有感兴趣的日志处理器。</p>
<p>常用的记录器对象的方法分为两类：配置和发送消息。</p>
<p>这些是最常用的配置方法：</p>
<p>Logger.setLevel()指定logger将会处理的最低的安全等级日志信息。<br>Logger.addHandler()和Logger.removeHandler()从记录器对象中添加和删除处理程序对象。处理器详见Handlers。<br>Logger.addFilter()和Logger.removeFilter()从记录器对象添加和删除过滤器对象。</p>
<p><strong>handlers</strong>:</p>
<p>处理程序对象负责将适当的日志消息（基于日志消息的严重性）分派到处理程序的指定目标。</p>
<p><code>Logger</code> 对象可以通过<code>addHandler()</code>方法增加零个或多个handler对象。举个例子，一个应用可以将所有的日志消息发送至日志文件，所有的错误级别（error）及以上的日志消息发送至标准输出，所有的严重级别（critical）日志消息发送至某个电子邮箱。在这个例子中需要三个独立的处理器，每一个负责将特定级别的消息发送至特定的位置。</p>
<p><strong>1)   logging.StreamHandler -&gt; 控制台输出</strong><br>使用这个Handler可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息。</p>
<p>它的构造函数是：</p>
<blockquote>
<p>StreamHandler([strm])<br>其中strm参数是一个文件对象。默认是sys.stderr</p>
</blockquote>
<p><strong>2）logging.FileHandler -&gt; 文件输出</strong></p>
<p>和StreamHandler类似，用于向一个文件输出日志信息。不过FileHandler会帮你打开这个文件。它的构造函数是：</p>
<blockquote>
<p>FileHandler(filename[,mode])<br>filename是文件名，必须指定一个文件名。<br>mode是文件的打开方式。默认是’a’，即添加到文件末尾。</p>
</blockquote>
<p>在logger中添加StreamHandler，可以将日志输出到屏幕上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">()</span>:</span></span><br><span class="line">	logger=logging.getLogger(__name__)</span><br><span class="line">    <span class="comment"># 创建对象</span></span><br><span class="line">	file=logging.FileHandler(<span class="string">"test1.txt"</span>)</span><br><span class="line">    <span class="comment"># 设置日志文件</span></span><br><span class="line">	screen=logging.StreamHandler()</span><br><span class="line">    <span class="comment"># 设置屏幕输出</span></span><br><span class="line">	formatter=logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">    <span class="comment"># 设置格式</span></span><br><span class="line">	file.setFormatter(formatter)</span><br><span class="line">    <span class="comment"># 添加日志文件存储格式</span></span><br><span class="line">	screen.setFormatter(formatter)</span><br><span class="line">    <span class="comment"># 添加屏幕输出格式</span></span><br><span class="line">	logger.addHandler(file)</span><br><span class="line">    <span class="comment"># 日志器添加到文件中</span></span><br><span class="line">	logger.addHandler(screen)</span><br><span class="line">    <span class="comment"># 日志器输出到屏幕</span></span><br><span class="line">	logger.setLevel(logging.DEBUG)</span><br><span class="line">    <span class="comment"># 设置级别</span></span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line">real_logger=get_logger()</span><br><span class="line">real_logger.debug(<span class="string">"1"</span>)</span><br><span class="line">real_logger.info(<span class="string">"2"</span>)</span><br><span class="line">real_logger.warning(<span class="string">"3"</span>)</span><br><span class="line">real_logger.error(<span class="string">"4"</span>)</span><br><span class="line">real_logger.critical(<span class="string">"5"</span>)</span><br><span class="line">-----------------</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">15</span>:<span class="number">34</span>:<span class="number">45</span>,<span class="number">391</span> - __main__ - DEBUG - <span class="number">1</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">15</span>:<span class="number">34</span>:<span class="number">45</span>,<span class="number">418</span> - __main__ - INFO - <span class="number">2</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">15</span>:<span class="number">34</span>:<span class="number">45</span>,<span class="number">424</span> - __main__ - WARNING - <span class="number">3</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">15</span>:<span class="number">34</span>:<span class="number">45</span>,<span class="number">428</span> - __main__ - ERROR - <span class="number">4</span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-15</span> <span class="number">15</span>:<span class="number">34</span>:<span class="number">45</span>,<span class="number">432</span> - __main__ - CRITICAL - <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h2 id="hashlib加密模块"><a href="#hashlib加密模块" class="headerlink" title="hashlib加密模块"></a>hashlib加密模块</h2><p>hashlib主要提供字符加密功能，将md5和sha模块整合到了一起，支持md5,sha1, sha224, sha256, sha384, sha512等算法。</p>
<p>此外哈希算法是一个的单向函数，无法进行反推。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># md5</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">"pigz"</span>    <span class="comment"># 被加密的内容</span></span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()             <span class="comment"># 构造一个hashlib的对象</span></span><br><span class="line">md5.update(string.encode(<span class="string">'utf-8'</span>))     <span class="comment"># 注意转码</span></span><br><span class="line">result = md5.hexdigest()         <span class="comment"># 返回加密结果</span></span><br><span class="line">print(<span class="string">"md5加密结果:"</span>,result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sha1</span></span><br><span class="line"></span><br><span class="line">sha1 = hashlib.sha1()</span><br><span class="line">sha1.update(string.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">result = sha1.hexdigest()</span><br><span class="line">print(<span class="string">"sha1加密结果:"</span>,result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sha256</span></span><br><span class="line"></span><br><span class="line">sha256 = hashlib.sha256()</span><br><span class="line">sha256.update(string.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">result = sha256.hexdigest()</span><br><span class="line">print(<span class="string">"sha256加密结果:"</span>,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sha384</span></span><br><span class="line"></span><br><span class="line">sha384 = hashlib.sha384()</span><br><span class="line">sha384.update(string.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">result = sha384.hexdigest()</span><br><span class="line">print(<span class="string">"sha384加密结果:"</span>,result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sha512</span></span><br><span class="line"></span><br><span class="line">sha512= hashlib.sha512()</span><br><span class="line">sha512.update(string.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">result = sha512.hexdigest()</span><br><span class="line">print(<span class="string">"sha512加密结果:"</span>,result)</span><br><span class="line">-----------------------------</span><br><span class="line">md5加密结果: fd562ded6a5b4de5648bec473dd4f604</span><br><span class="line">sha1加密结果: c41ee49bfc2828d0b232d8c858d2a77df54c7d93</span><br><span class="line">sha256加密结果: <span class="number">883642e660</span>d2ef545d3d9f0cbd12790a99aea6358fb67c46664ff22fefa8b7df</span><br><span class="line">sha384加密结果: a9f38c52370c93b2fdd58cdbdfa9ea142a532f0f521d415971692c7471bd63a9acf375d093b54b226e9efa28fcab6b47</span><br><span class="line">sha512加密结果: ad87dfea4f697782cc80149893a7fd9a3c6d39dfbea8173b5a3423b71e5dd2efe30c911208cfaa01a259df7046bcf003491c5615512e1194f2ecf277178880ff</span><br></pre></td></tr></table></figure>

<p>加密可以重复加密，hash.update(arg) 更新哈希对象以字符串参数, 注意：如果同一个hash对象重复调用该方法，则m.update(a); m.update(b) 等效于 m.update(a+b）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="string">'pig'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">res = m.hexdigest()</span><br><span class="line">print(<span class="string">"第一次pig加密:"</span>,res)</span><br><span class="line"></span><br><span class="line">m.update(<span class="string">'z'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">res = m.hexdigest()</span><br><span class="line">print(<span class="string">"第二次z加密:"</span>,res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1 = hashlib.md5()</span><br><span class="line">m1.update(<span class="string">'z'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">res = m1.hexdigest()</span><br><span class="line">print(<span class="string">"z单独加密:"</span>,res)</span><br><span class="line"></span><br><span class="line">m2 = hashlib.md5()</span><br><span class="line">m2.update(<span class="string">'pigz'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">res = m2.hexdigest()</span><br><span class="line">print(<span class="string">"pigz单独加密:"</span>,res)</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">第一次pig加密: f74c6af46a78becb2f1bd3f95bbd5858</span><br><span class="line">第二次z加密: fd562ded6a5b4de5648bec473dd4f604</span><br><span class="line">z单独加密: fbade9e36a3f36d3d676c1b808451dd7</span><br><span class="line">pigz单独加密: fd562ded6a5b4de5648bec473dd4f604</span><br></pre></td></tr></table></figure>

<p>以上加密算法虽然依然非常厉害，但时候存在缺陷，即：通过撞库可以反解。所以，有必要对加密算法中添加自定义key再来做加密。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="string">'pig'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">res = m.hexdigest()</span><br><span class="line">print(<span class="string">"第一次pig加密:"</span>,res)</span><br><span class="line"></span><br><span class="line">m1=hashlib.md5(<span class="string">'123'</span>.encode(<span class="string">'utf-8'</span>))  </span><br><span class="line"><span class="comment"># 在创建md5对象时加入key：'123'.encode('utf-8')</span></span><br><span class="line">m1.update(<span class="string">'pig'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">res = m1.hexdigest()</span><br><span class="line">print(<span class="string">"第二次pig加密:"</span>,res)</span><br><span class="line">------------</span><br><span class="line">第一次pig加密: f74c6af46a78becb2f1bd3f95bbd5858</span><br><span class="line">第二次pig加密: d2a28707542ecfdc9f2a8d98232afe29</span><br></pre></td></tr></table></figure>



<p><strong>运用hashlib加密制作保护密码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">per=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret_md5</span><span class="params">(num)</span>:</span></span><br><span class="line">    x=hashlib.md5(<span class="string">"pigz"</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    x.update(num.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> x.hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"用户注册"</span>)</span><br><span class="line">    name=input(<span class="string">"请输入用户名："</span>)</span><br><span class="line">    pas=input(<span class="string">"请输入密码："</span>)</span><br><span class="line">    sam=&#123;<span class="string">"name"</span>:name,<span class="string">"password"</span>:secret_md5(pas)&#125;</span><br><span class="line">    per.append(sam)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"用户登录"</span>)</span><br><span class="line">    name=input(<span class="string">"请输入用户名："</span>)</span><br><span class="line">    pas=input(<span class="string">"请输入登录密码："</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> per:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="string">'name'</span>]==name <span class="keyword">and</span> i[<span class="string">'password'</span>]==secret_md5(pas):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">register()</span><br><span class="line">resu=load()</span><br><span class="line"><span class="keyword">if</span> resu:</span><br><span class="line">    print(<span class="string">"登陆成功"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"登陆失败"</span>)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2020/02/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><ul>
<li>类和对象</li>
<li>面向对象的基本特征–封装性</li>
<li>面向对象的基本特征–继承性</li>
<li>面向对象的基本特征–多态性</li>
<li>Python根类–object</li>
<li>枚举类</li>
</ul>
<a id="more"></a>

<h2 id="类和对象："><a href="#类和对象：" class="headerlink" title="类和对象："></a>类和对象：</h2><p>python中的数据类型都是类，类是组成python程序的基本要素，它封装了一类对象的数据和操作。</p>
<h3 id="定义类："><a href="#定义类：" class="headerlink" title="定义类："></a>定义类：</h3><p>python语句中一个类的实现包括类定义和类体。</p>
<p>类定义语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名[<span class="params">(父类)</span>]:</span></span><br><span class="line">    类体</span><br></pre></td></tr></table></figure>

<p>class是申明类的关键词，类名可以自定义，父类可以省略，具体看后面的继承性。</p>
<h3 id="创建和使用对象："><a href="#创建和使用对象：" class="headerlink" title="创建和使用对象："></a>创建和使用对象：</h3><p>创建对象很简单，就是在调用类时在类的后面加一个括号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">ani=Animal()  <span class="comment"># ani是一个对象</span></span><br></pre></td></tr></table></figure>

<p>使用对象只需要进行print，打印出需要的结果，具体在后面会体现出来。</p>
<h3 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h3><p>python中的类有一个初始__init__()方法，该方法用来创建和初始化实例变量。该方法第一个参数为self，其后的参数用来初始化实例变量，调用该方法是不需要传入self，具体可见下面的示例。</p>
<h3 id="实例变量："><a href="#实例变量：" class="headerlink" title="实例变量："></a>实例变量：</h3><p>实例变量就是某个实例或对象个体特有的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age,sex,weight)</span>:</span></span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line">        self.weight=weight</span><br><span class="line">        <span class="comment"># self.**就是将数据定义到实例当中，self指对象名称</span></span><br><span class="line">p1=people(<span class="number">12</span>,<span class="string">'male'</span>,<span class="number">120</span>)  <span class="comment">#p1就是对象名称，12，male，120，分别对应类中的age，sex，weight。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  通过对象调用类中属于自己的数据，即实例变量，打印出p1的各个属性：</span></span><br><span class="line">print(<span class="string">"年龄&#123;&#125;"</span>.format(p1.age))</span><br><span class="line">print(<span class="string">"性别&#123;&#125;"</span>.format(p1.sex))</span><br><span class="line">print(<span class="string">"体重&#123;&#125;"</span>.format(p1.weight))</span><br><span class="line">------</span><br><span class="line">年龄<span class="number">12</span></span><br><span class="line">性别male</span><br><span class="line">体重<span class="number">120</span></span><br></pre></td></tr></table></figure>

<h3 id="类变量："><a href="#类变量：" class="headerlink" title="类变量："></a>类变量：</h3><p>类变量是所有实例或对象共有的变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    rate=<span class="number">0.001</span>     <span class="comment"># 类变量利率</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,owner,amount)</span>:</span></span><br><span class="line">        self.owner=owner</span><br><span class="line">        self.amount=amount</span><br><span class="line">        <span class="comment"># 实例变量</span></span><br><span class="line">p1=Account(<span class="string">'p'</span>,<span class="number">120</span>)  <span class="comment"># 创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印p1</span></span><br><span class="line">print(<span class="string">"&#123;&#125;的存款为&#123;&#125;"</span>.format(p1.owner,p1.amount))</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(p1.rate))</span><br><span class="line">----</span><br><span class="line">p的存款为<span class="number">120</span></span><br><span class="line"><span class="number">0.001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要改变对象中的属性的值，或者加上什么，可以在对象定义后进行改写,因为程序都是从类外先找数据，如果找不到才到类里面找数据。如果想要一次性输出对象的所有属性，就可以使用__dict__函数。如：</span></span><br><span class="line">p1.amount=<span class="number">240</span></span><br><span class="line">p1.amount1=<span class="number">120</span></span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(p1.__dict__))</span><br><span class="line">----</span><br><span class="line">&#123;<span class="string">'rate'</span>:<span class="number">0.001</span>,<span class="string">'owner'</span>:<span class="string">'p'</span>,<span class="string">'amount'</span>:<span class="number">240</span>,<span class="string">'amount1'</span>:<span class="number">120</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实例方法："><a href="#实例方法：" class="headerlink" title="实例方法："></a>实例方法：</h3><p>实例方法和实例变量相似，都是某个实例或对象个体所特有的。</p>
<p>方法是在类中的函数，实例方法在定义时的第一个参数也应该是self，通过self来调用相应的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hi</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age,male)</span>:</span></span><br><span class="line">        self.age=age</span><br><span class="line">        self.male=male</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">s</span><span class="params">(self)</span>:</span>          <span class="comment"># 实例方法</span></span><br><span class="line">        self.age+=<span class="number">12</span>   </span><br><span class="line">po=hi(<span class="number">12</span>,<span class="string">'male'</span>)</span><br><span class="line">print(<span class="string">"&#123;&#125;,&#123;&#125;"</span>.format(po.age,po.male))</span><br></pre></td></tr></table></figure>

<h3 id="类方法："><a href="#类方法：" class="headerlink" title="类方法："></a>类方法：</h3><p>类方法和类变量相似，是属于类而不是属于特有个体的。定义时，它的第一个参数不是self，而是类的type实例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    rate=<span class="number">0.001</span>  <span class="comment"># 类变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,amount)</span>:</span>  <span class="comment"># 实例变量</span></span><br><span class="line">        self.amount=amount</span><br><span class="line">    <span class="comment"># 类方法：</span></span><br><span class="line"><span class="meta">    @classmethod   # 使用装饰器申明该方法是类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">re</span><span class="params">(cls,num)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.rate*num</span><br><span class="line">interest=Account.re(<span class="number">1000</span>)</span><br><span class="line">print(interest)</span><br><span class="line">-----</span><br><span class="line"><span class="number">1.0</span></span><br></pre></td></tr></table></figure>

<h3 id="静态方法："><a href="#静态方法：" class="headerlink" title="静态方法："></a>静态方法：</h3><p>如果定义的方法既不想与实例绑定，也不想与类绑定，只是想把类作为他的命名空间，可以使用静态方法解决：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    rate=<span class="number">0.001</span>  <span class="comment"># 类变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,amount)</span>:</span>  <span class="comment"># 实例变量</span></span><br><span class="line">        self.amount=amount</span><br><span class="line">    <span class="comment"># 类方法：</span></span><br><span class="line"><span class="meta">    @classmethod   # 使用装饰器申明该方法是类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">re</span><span class="params">(cls,num)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.rate*num</span><br><span class="line">    <span class="comment"># 静态方法：</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">st</span><span class="params">(num)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Account.re(num)</span><br><span class="line">    <span class="comment"># 不需要加入self，通过调用相应的装饰器，可以实现</span></span><br></pre></td></tr></table></figure>

<p><strong>通过上面的介绍可以进行操作</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>编写Person类，能够通过如下测试代码</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    ...</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 以下为测试代码</span></span><br><span class="line">tom = Person(<span class="string">'tom'</span>, <span class="number">10</span>)</span><br><span class="line">tom.greet()</span><br><span class="line"><span class="comment"># 程序输出如下：</span></span><br><span class="line"><span class="comment"># Hello, my name is tom, I'm 10 years old</span></span><br><span class="line"></span><br><span class="line">jerry = Person(<span class="string">'jerry'</span>, <span class="number">12</span>)</span><br><span class="line">jerry.greet()</span><br><span class="line"><span class="comment"># 程序输出如下：</span></span><br><span class="line"><span class="comment"># Hello, my name is jerry, I'm 11 years old</span></span><br><span class="line">----------</span><br><span class="line">code：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Hello,my name is &#123;&#125;,I\'m &#123;&#125; years old"</span>.format(self.name,self.age))</span><br><span class="line">tom = Person(<span class="string">'tom'</span>, <span class="number">10</span>)</span><br><span class="line">tom.greet()</span><br><span class="line">jerry = Person(<span class="string">'jerry'</span>, <span class="number">12</span>)</span><br><span class="line">jerry.greet()</span><br></pre></td></tr></table></figure>

<h2 id="面向对象的基本特征–封装性："><a href="#面向对象的基本特征–封装性：" class="headerlink" title="面向对象的基本特征–封装性："></a>面向对象的基本特征–封装性：</h2><p>封装性是面向对象的三大特征之一，python语言没有封装性相关的关键字，他是通过特定的名称实现对变量和方法的封装。封装使外部访问者不能随意存取对象的内部数据，隐藏了对象的内部细节，只保留有限的对外接口。</p>
<h3 id="私有变量："><a href="#私有变量：" class="headerlink" title="私有变量："></a>私有变量：</h3><p>默认情况下python中的变量是共有的，可以在类以外访问他们。如果想要让他们变成私有，即在外部无法访问，在变量前面加上两个下划线就行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hi</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age)</span>:</span></span><br><span class="line">        self.__age=age  <span class="comment"># 定义私有变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__age+=<span class="number">1</span></span><br><span class="line">p=hi(<span class="number">12</span>)</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(p.age))</span><br><span class="line">---------</span><br><span class="line">AttributeError: <span class="string">'hi'</span> object has no attribute <span class="string">'age'</span></span><br><span class="line"><span class="comment">#  __age变量在类内部使用没有问题，但不能在外。</span></span><br></pre></td></tr></table></figure>

<p><strong>如果非要访问内部私有变量，可以使用p._hi__age.但这无疑破坏了封装性，谨慎使用</strong></p>
<h3 id="私有方法："><a href="#私有方法：" class="headerlink" title="私有方法："></a>私有方法：</h3><p>私有方法和私有变量的封装是相似的，只需要在方法前加上两个下划线就行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hi</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age)</span>:</span></span><br><span class="line">        self.__age=age  <span class="comment"># 定义私有变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__i()   <span class="comment"># 内部调用私有方法</span></span><br><span class="line">        print(<span class="string">"&#123;&#125;"</span>.format(self._hi__age))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__i</span><span class="params">(self)</span>:</span>  <span class="comment"># 定义私有方法</span></span><br><span class="line">        self.__age+=<span class="number">1</span></span><br><span class="line">        print(<span class="string">"*"</span>*<span class="number">10</span>)</span><br><span class="line">p=hi(<span class="number">12</span>)</span><br><span class="line">p.h()   </span><br><span class="line">p.__i()     <span class="comment"># 外部调用私有方法</span></span><br><span class="line">-----------</span><br><span class="line">**********   |<span class="comment"># 内部调用成功 </span></span><br><span class="line"><span class="number">13</span>           </span><br><span class="line">Traceback (most recent call last):    <span class="comment"># 外部调用失败</span></span><br><span class="line">  File <span class="string">"F:/draft/mian.py"</span>, line <span class="number">12</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    p.__i()</span><br><span class="line">AttributeError: <span class="string">'hi'</span> object has no attribute <span class="string">'__i'</span></span><br></pre></td></tr></table></figure>

<p><strong>如果非要访问私有方法，可以参考私有变量的使用</strong></p>
<h3 id="定义属性："><a href="#定义属性：" class="headerlink" title="定义属性："></a>定义属性：</h3><p>封装性通常是对成员变量进行的封装。在严格意义上，一个类是不应该有公有的实例成员变量，这些实例成员变量应该被设计为私有的，然后通过公有的setter和getter访问器访问。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ji</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age,name)</span>:</span></span><br><span class="line">        self.age=age</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self,age)</span>:</span>  <span class="comment"># 定义setter访问器</span></span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span>   <span class="comment"># 定义getter访问器</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">a=ji(<span class="number">12</span>,<span class="string">'sd'</span>)</span><br><span class="line">print(<span class="string">"&#123;&#125;,&#123;&#125;"</span>.format(a.get_name(),a.age))</span><br><span class="line">a.set_age(<span class="number">14</span>)</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a.age))</span><br><span class="line">---------</span><br><span class="line">sd,<span class="number">12</span></span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure>

<p>使用访问器形式的封装在编写代码时比较麻烦，为解决这个问题，python中提供了属性（property），定义属性可以使用@property（修饰getter访问器）和@属性名.setter修饰器（修饰setter访问器）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ji</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age,name)</span>:</span></span><br><span class="line">        self.__age = age</span><br><span class="line">        self.name=name</span><br><span class="line"><span class="meta">    @property        # 替代get_name(self)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span>   <span class="comment"># 定义getter访问器</span></span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"><span class="meta">    @age.setter        # 替代set_age(self,age)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self,age)</span>:</span>  <span class="comment"># 定义setter访问器</span></span><br><span class="line">        self.__age=age</span><br><span class="line">a=ji(<span class="number">12</span>,<span class="string">'sd'</span>)</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a.age))</span><br><span class="line">a.age=<span class="number">14</span>      <span class="comment"># 相当于a.set_age(14)</span></span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a.age))</span><br><span class="line">---------</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure>

<p>使用@时，需要注意两点：</p>
<ol>
<li>@property必须在@属性名.setter上面</li>
<li>@property下面的函数名和@属性名.setter的属性名需要一致</li>
</ol>
<p>当然上面是严格的要求，，但实际上，不是很严格，就没有必要那么严格的遵循：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ji</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age,name)</span>:</span></span><br><span class="line">        self.__age = age</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">(self,age)</span>:</span>  </span><br><span class="line">        self.__age=age</span><br><span class="line">a=ji(<span class="number">12</span>,<span class="string">'sd'</span>)</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a._ji__age))</span><br><span class="line">a.b(<span class="number">14</span>)</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(a._ji__age))</span><br><span class="line">-------</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure>

<p>直接调用，但是完全破坏了类的封装性，权衡使用。</p>
<h2 id="面向对象的基本特征–继承性："><a href="#面向对象的基本特征–继承性：" class="headerlink" title="面向对象的基本特征–继承性："></a>面向对象的基本特征–继承性：</h2><p>类的继承性是面向对象语言的基本特征，且多态性的前提就是继承性。</p>
<h3 id="继承概念："><a href="#继承概念：" class="headerlink" title="继承概念："></a>继承概念：</h3><p>简单来说就是两点：</p>
<blockquote>
<p>使得字类具有父类的属性和方法，实现代码重用</p>
<p>字类可以新增方法或者重新定义父类的方法</p>
</blockquote>
<h3 id="增加属性："><a href="#增加属性：" class="headerlink" title="增加属性："></a>增加属性：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先有一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age)</span>:</span></span><br><span class="line">        self.age=age    <span class="comment"># 父类中只可以记录年龄</span></span><br><span class="line"><span class="comment"># 有一个任务要求创建对象需要包括年龄和姓名，所以可以在写一个子类，其中包括父类，直接使用父类的年龄记录，再在子类中新增记录姓名的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        Parent.__init__(self,age)   <span class="comment"># 调用父类</span></span><br><span class="line">        self.name=name              <span class="comment"># 新增子类属性</span></span><br><span class="line">c1=Children(<span class="string">'c1'</span>,<span class="number">123</span>)</span><br><span class="line">print(<span class="string">"&#123;&#125;"</span>.format(c1.__dict__))</span><br><span class="line">---------</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">123</span>, <span class="string">'name'</span>: <span class="string">'c1'</span>&#125;    <span class="comment"># 结果</span></span><br></pre></td></tr></table></figure>

<h3 id="重写方法："><a href="#重写方法：" class="headerlink" title="重写方法："></a>重写方法：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先有一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age)</span>:</span></span><br><span class="line">        self.age=age    <span class="comment"># 父类中只可以记录年龄</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.age)</span><br><span class="line"><span class="comment"># 有一个任务要求创建对象需要包括年龄和姓名，所以可以在写一个子类，其中包括父类，直接使用父类的年龄记录，再在子类中新增记录姓名的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        Parent.__init__(self,age)   <span class="comment"># 调用父类</span></span><br><span class="line">        self.name=name              <span class="comment"># 新增子类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span>   <span class="comment"># 在字类中定义的方法与父类重名的话直接将父类的方法给覆盖，也就是重写了方法</span></span><br><span class="line">        print(self.name,self.age)</span><br><span class="line">c1=Children(<span class="string">'c1'</span>,<span class="number">123</span>)</span><br><span class="line">c1.printf()</span><br><span class="line">---------</span><br><span class="line">c1 <span class="number">123</span>   <span class="comment"># 结果</span></span><br></pre></td></tr></table></figure>

<h3 id="多继承性："><a href="#多继承性：" class="headerlink" title="多继承性："></a>多继承性：</h3><p>所谓多继承性就是一个子类有多个父类。多继承可能会导致一个子类继承的多个父类中的方法名有所重复，导致无法正确运行。而python就是解决了这个问题。当子类实例调用一个方法时，先从子类中查找，如果没有找到，再查找父类。父类的查找顺序是按照子类声明的父类列表从左到右。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"$"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"#"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p3</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"&amp;"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c1</span><span class="params">(p1,p2p3)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"()"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c2</span><span class="params">(p1,p3)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">a=c1()</span><br><span class="line">a.run()</span><br><span class="line">a.run1()</span><br><span class="line">b=c2()</span><br><span class="line">b.run()</span><br><span class="line">b.run1()</span><br><span class="line">----------</span><br><span class="line">()()()()()()()()()()</span><br><span class="line">&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</span><br><span class="line">$$$$$$$$$$</span><br><span class="line">&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;      <span class="comment"># 结果</span></span><br></pre></td></tr></table></figure>

<h2 id="面向对象的基本特征–多态性"><a href="#面向对象的基本特征–多态性" class="headerlink" title="面向对象的基本特征–多态性:"></a>面向对象的基本特征–多态性:</h2><p>在面向对象中，多态是一个非常重要的特性，理解多态有利于进行面向对象的分析和设计。</p>
<h3 id="多态概念："><a href="#多态概念：" class="headerlink" title="多态概念："></a>多态概念：</h3><p>发生多态需要两个前提条件：</p>
<blockquote>
<p>继承–多态一定发生在子类和父类之间</p>
<p>重写–子类重写父类的方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 父类A有两个子类a1，a2，在父类和子类中都有相应的printf()方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a1</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a1"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a2</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a2"</span>*<span class="number">10</span>)</span><br><span class="line">B=A()        <span class="comment"># 没有发生多态</span></span><br><span class="line">B.printf()</span><br><span class="line">b1=a1()      <span class="comment"># 发生多态</span></span><br><span class="line">b1.printf()</span><br><span class="line">b2=a2()      <span class="comment"># 发生多态  </span></span><br><span class="line">b2.printf()</span><br><span class="line">-----------------</span><br><span class="line">AAAAAAAAAA</span><br><span class="line">a1a1a1a1a1a1a1a1a1a1</span><br><span class="line">a2a2a2a2a2a2a2a2a2a2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多态发生时，函数会自动选择调用相应类中的方法</span></span><br></pre></td></tr></table></figure>

<h3 id="类型检查："><a href="#类型检查：" class="headerlink" title="类型检查："></a>类型检查：</h3><p>鉴于多态性的发生，python中可以通过运行期类型检查证实，使用isinstance(object,classinfo)函数，检查object是classinfo类或者classinfo子类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a1</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a1"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a2</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a2"</span>*<span class="number">10</span>)</span><br><span class="line">B=A()</span><br><span class="line">b1=a1()</span><br><span class="line">b2=a2()</span><br><span class="line">B.printf()</span><br><span class="line">b1.printf()</span><br><span class="line">b2.printf()</span><br><span class="line">print(isinstance(B,A))</span><br><span class="line">print(isinstance(B,a2))</span><br><span class="line">print(isinstance(b1,A))</span><br><span class="line">print(isinstance(b1,a1))</span><br><span class="line">print(isinstance(b1,a2))</span><br><span class="line">print(isinstance(b2,A))</span><br><span class="line">print(isinstance(b2,a1))</span><br><span class="line">print(isinstance(b2,a2))</span><br><span class="line">------------------------</span><br><span class="line">AAAAAAAAAA</span><br><span class="line">a1a1a1a1a1a1a1a1a1a1</span><br><span class="line">a2a2a2a2a2a2a2a2a2a2</span><br><span class="line"><span class="literal">True</span>     <span class="comment"># B是A类型</span></span><br><span class="line"><span class="literal">False</span>    <span class="comment"># B不是a1类型</span></span><br><span class="line"><span class="literal">True</span>     <span class="comment"># a1是A的子类，所以b1也是A类型</span></span><br><span class="line"><span class="literal">True</span>     <span class="comment"># b1是a1类型</span></span><br><span class="line"><span class="literal">False</span>    <span class="comment"># b1不是a2类型</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>另外还有一个类似于isinstance(object,classinfo)函数，issubclass(class,classinfo)函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a1</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a1"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a2</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a2"</span>*<span class="number">10</span>)</span><br><span class="line">B=A()</span><br><span class="line">b1=a1()</span><br><span class="line">b2=a2()</span><br><span class="line">B.printf()</span><br><span class="line">b1.printf()</span><br><span class="line">b2.printf()</span><br><span class="line">print(issubclass(a1,A))</span><br><span class="line">print(issubclass(a1,a2))</span><br><span class="line">print(issubclass(a2,A))</span><br><span class="line">-------------------------</span><br><span class="line">AAAAAAAAAA</span><br><span class="line">a1a1a1a1a1a1a1a1a1a1</span><br><span class="line">a2a2a2a2a2a2a2a2a2a2</span><br><span class="line"><span class="literal">True</span>      <span class="comment"># a1是A的子类</span></span><br><span class="line"><span class="literal">False</span>     <span class="comment"># a1和a2不是同类</span></span><br><span class="line"><span class="literal">True</span>      <span class="comment"># a2是A的子类</span></span><br></pre></td></tr></table></figure>

<h3 id="鸭子类型："><a href="#鸭子类型：" class="headerlink" title="鸭子类型："></a>鸭子类型：</h3><p>多态性对于<a href="https://blog.csdn.net/qq_38977097/article/details/80974658" target="_blank" rel="noopener">动态语言</a>的意义不大，在动态语言中有一种检查类型叫做“鸭子类型”，即一只鸟看上去像鸭子，走起来像鸭子，叫起来像鸭子，那么他就是鸭子。鸭子类型不关注变量的类型，而关注变量具有的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a1</span><span class="params">(A)</span>:</span>         <span class="comment"># a1是A的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a1"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a2</span>:</span>            <span class="comment"># a2和A，a1都没有关系</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a2"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(A)</span>:</span></span><br><span class="line">    A.printf()</span><br><span class="line">go(A())</span><br><span class="line">go(a1())</span><br><span class="line">go(a2())</span><br><span class="line">-------------</span><br><span class="line">AAAAAAAAAA</span><br><span class="line">a1a1a1a1a1a1a1a1a1a1</span><br><span class="line">a2a2a2a2a2a2a2a2a2a2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数go()在接受参数是考虑的是接受A类型的printf()方法，但是由于python解释器不做任何类型检查，所以可以传入任何实际参数。当a2传入到go()函数时，它可以正常运行，这就是鸭子类型。</span></span><br></pre></td></tr></table></figure>

<h2 id="Python根类–object"><a href="#Python根类–object" class="headerlink" title="Python根类–object:"></a>Python根类–object:</h2><p>python中所有类都是间接或直接继承object类</p>
<p>，它是所有类的“祖先”。在python3中class会默认加上object。</p>
<p><a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" target="_blank" rel="noopener">所有类的方法</a></p>
<p>这里主要讲解几个方法，这些方法都是需要在子类中重写的：</p>
<blockquote>
<ul>
<li>__str__():返回该对象的字符串表示</li>
<li>__eq__(other):指示其他某个对象是否与此对象“相等”</li>
</ul>
</blockquote>
<h3 id="str-方法："><a href="#str-方法：" class="headerlink" title="__str__()方法："></a>__str__()方法：</h3><p>为了方便日志输出等处理，所有的对象都可以输出自己的描述信息。如果在使用时没有重写__str__()方法，则默认返回对象的类名以及内存地址等信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">peo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        tem=<span class="string">'HI&#123;0&#125;,you are &#123;1&#125;'</span></span><br><span class="line">        <span class="keyword">return</span> tem.format(self.name,self.age)</span><br><span class="line">p1=peo(<span class="string">'jack'</span>,<span class="number">123</span>)</span><br><span class="line">print(p1)</span><br><span class="line">----------</span><br><span class="line">HIjack,you are <span class="number">123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不用__str__()方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">peo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">str</span><span class="params">(self)</span>:</span></span><br><span class="line">        tem=<span class="string">'HI&#123;0&#125;,you are &#123;1&#125;'</span></span><br><span class="line">        <span class="keyword">return</span> tem.format(self.name,self.age)</span><br><span class="line">p1=peo(<span class="string">'jack'</span>,<span class="number">123</span>)</span><br><span class="line">print(p1)</span><br><span class="line">print(p1.name,p1.age)</span><br><span class="line">------------</span><br><span class="line">&lt;__main__.peo object at <span class="number">0x0000029FAFDB1DF0</span>&gt;</span><br><span class="line">jack <span class="number">123</span></span><br></pre></td></tr></table></figure>

<h3 id="eq-方法（对象比较方法）："><a href="#eq-方法（对象比较方法）：" class="headerlink" title="__eq__()方法（对象比较方法）："></a>__eq__()方法（对象比较方法）：</h3><p>之前的==运算符是比较两个对象的内容是否相同，如果要比较两个对象时，在对象的内部通过调用__eq__()方法进行比较：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">peo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        tem=<span class="string">'HI&#123;0&#125;,you are &#123;1&#125;'</span></span><br><span class="line">        <span class="keyword">return</span> tem.format(self.name,self.age)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.age==other.age <span class="keyword">and</span> self.name==other.name:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">p1=peo(<span class="string">'as'</span>,<span class="number">12</span>)</span><br><span class="line">p2=peo(<span class="string">'sa'</span>,<span class="number">12</span>)</span><br><span class="line">p3=peo(<span class="string">'as'</span>,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">print(p1==p2)</span><br><span class="line">print(p1==p3)</span><br><span class="line">------------</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有__eq__()方法：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">peo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        tem=<span class="string">'HI&#123;0&#125;,you are &#123;1&#125;'</span></span><br><span class="line">        <span class="keyword">return</span> tem.format(self.name,self.age)</span><br><span class="line">p1=peo(<span class="string">'as'</span>,<span class="number">12</span>)</span><br><span class="line">p2=peo(<span class="string">'sa'</span>,<span class="number">12</span>)</span><br><span class="line">p3=peo(<span class="string">'as'</span>,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">print(p1==p2)</span><br><span class="line">print(p1==p3)</span><br><span class="line">--------</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><strong>或许我们可以在类的外部重新写函数进行比较，但是没有重写__eq__()方法在数量较多的比较情况下快捷方便。</strong></p>
<h2 id="枚举类："><a href="#枚举类：" class="headerlink" title="枚举类："></a>枚举类：</h2><p>枚举是用来管理一组相关的有限的常量的集合，也是一种类。</p>
<h3 id="定义枚举类："><a href="#定义枚举类：" class="headerlink" title="定义枚举类："></a>定义枚举类：</h3><p>常用格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 枚举类名<span class="params">(enum.Enum)</span>:</span></span><br><span class="line">    枚举常量列表</span><br></pre></td></tr></table></figure>

<p>枚举类继承于enum.Enum类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"><span class="comment"># 定义一个星期的枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">week</span><span class="params">(enum.Enum)</span>:</span></span><br><span class="line">    MONDAY=<span class="number">1</span></span><br><span class="line">    TUESDAY=<span class="number">2</span></span><br><span class="line">    WEDNESDAY=<span class="number">3</span></span><br><span class="line">    THURSDAY=<span class="number">4</span></span><br><span class="line">    FRIDAY=<span class="number">5</span></span><br><span class="line">    SATURDAY=<span class="number">6</span></span><br><span class="line">    SUNDAY=<span class="number">7</span></span><br><span class="line">day=week.MONDAY</span><br><span class="line">print(day)</span><br><span class="line">print(day.value)</span><br><span class="line">print(day.name)</span><br><span class="line">-----------</span><br><span class="line">week.MONDAY</span><br><span class="line"><span class="number">1</span></span><br><span class="line">MONDAY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举类不能在内部构造函数，只是单单的集合类</span></span><br></pre></td></tr></table></figure>

<h3 id="限制枚举类："><a href="#限制枚举类：" class="headerlink" title="限制枚举类："></a>限制枚举类：</h3><p>为了存储和使用方便，枚举类中的常量成员都是整数，而且有着不同的取值。为了是成员常量值为整数，可以使用enum.IntEnum作为枚举父类。为了防止成员常量值重复，可以为枚举类加上@enum.unique装饰器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"><span class="meta">@enum.unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">week</span><span class="params">(enum.IntEnum)</span>:</span></span><br><span class="line">    MONDAY=<span class="number">1</span></span><br><span class="line">    TUESDAY=<span class="number">2</span></span><br><span class="line">    WEDNESDAY=<span class="number">3</span></span><br><span class="line">    THURSDAY=<span class="number">4</span></span><br><span class="line">    FRIDAY=<span class="number">5</span></span><br><span class="line">    SATURDAY=<span class="number">6</span></span><br><span class="line">    SUNDAY=<span class="number">7</span></span><br><span class="line">    hi=<span class="number">7</span></span><br><span class="line">day=week.SUNDAY</span><br><span class="line">day1=week.hi</span><br><span class="line">print(day)</span><br><span class="line">print(day1)</span><br><span class="line">----------------------</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">'duplicate values found in %r: %s'</span> %</span><br><span class="line">ValueError: duplicate values found in &lt;enum 'week'&gt;: hi -&gt; SUNDAY</span><br><span class="line"><span class="comment"># 因为有着unique的限制，而hi和SUNDAY的值重复所以报错</span></span><br><span class="line"><span class="comment"># 如果将unique注释</span></span><br><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"><span class="comment"># @enum.unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">week</span><span class="params">(enum.IntEnum)</span>:</span></span><br><span class="line">    MONDAY=<span class="number">1</span></span><br><span class="line">    TUESDAY=<span class="number">2</span></span><br><span class="line">    WEDNESDAY=<span class="number">3</span></span><br><span class="line">    THURSDAY=<span class="number">4</span></span><br><span class="line">    FRIDAY=<span class="number">5</span></span><br><span class="line">    SATURDAY=<span class="number">6</span></span><br><span class="line">    SUNDAY=<span class="number">7</span></span><br><span class="line">    hi=<span class="number">7</span></span><br><span class="line">day=week.SUNDAY</span><br><span class="line">day1=week.hi</span><br><span class="line">print(day)</span><br><span class="line">print(day1.name)</span><br><span class="line">------------------</span><br><span class="line">week.SUNDAY</span><br><span class="line">SUNDAY</span><br><span class="line">                  <span class="comment"># 因为hi和SUNDAY的值重复，直选其靠前的输出</span></span><br></pre></td></tr></table></figure>

<h3 id="使用枚举类："><a href="#使用枚举类：" class="headerlink" title="使用枚举类："></a>使用枚举类：</h3><p>使用枚举类可以提高程序的可读性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">week</span><span class="params">(enum.IntEnum)</span>:</span></span><br><span class="line">    MONDAY=<span class="number">1</span></span><br><span class="line">    TUESDAY=<span class="number">2</span></span><br><span class="line">    WEDNESDAY=<span class="number">3</span></span><br><span class="line">    THURSDAY=<span class="number">4</span></span><br><span class="line">    FRIDAY=<span class="number">5</span></span><br><span class="line">    SATURDAY=<span class="number">6</span></span><br><span class="line">    SUNDAY=<span class="number">7</span></span><br><span class="line">day=week.MONDAY</span><br><span class="line"><span class="keyword">if</span> day==<span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"hi"</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">"no"</span>)</span><br><span class="line"><span class="keyword">if</span> day==<span class="string">"MONDAY"</span>:</span><br><span class="line">    print(<span class="string">"hihi"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"nono"</span>)</span><br><span class="line">---------------------</span><br><span class="line">hi</span><br><span class="line">nono</span><br></pre></td></tr></table></figure>



<p><strong>使用类写一个通讯录</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">使用面向对象的方法，重新实现通讯录的程序，实现提示如下：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">   包括三个属性: name address phone</span><br><span class="line">   使用类描述一个人的所有信息</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddressBook</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>:</span></span><br><span class="line">       self.persons = []</span><br><span class="line">       </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">addPerson</span>:</span></span><br><span class="line">       </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">delPerson</span>:</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">queryPerson</span>:</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">listAllPerson</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序主循环如下：</span></span><br><span class="line">初始化addressBook</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   <span class="keyword">if</span> 用户选择功能“创建联系人<span class="string">"</span></span><br><span class="line"><span class="string">      addressBook.addPerson</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   if 用户选择功能“删除联系人"</span></span><br><span class="line">      addressBook.delPerson</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> 用户选择功能“查询联系人<span class="string">"</span></span><br><span class="line"><span class="string">      addressBook.queryPerson</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   if 用户选择功能“列出所有联系人"</span></span><br><span class="line">      addressBook.listAllPerson</span><br><span class="line">-------------------code:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">begin</span><span class="params">()</span>:</span>    <span class="comment"># 初始化功能表</span></span><br><span class="line">    print(<span class="string">"1. 创建联系人"</span>)</span><br><span class="line">    print(<span class="string">"2. 删除联系人"</span>)</span><br><span class="line">    print(<span class="string">"3. 查询联系人"</span>)</span><br><span class="line">    print(<span class="string">"4. 列出所有联系人"</span>)</span><br><span class="line">    print(<span class="string">"5. 退出"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>   <span class="comment"># 创建单独一个人的类来包括他的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,address,phone)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.address=address</span><br><span class="line">        self.phone=phone</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddressBook</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.person=[]  <span class="comment"># 利用列表来包括人物信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addPerson</span><span class="params">(self)</span>:</span></span><br><span class="line">        name=input(<span class="string">"name:"</span>)</span><br><span class="line">        address=input(<span class="string">"address:"</span>)</span><br><span class="line">        phone=input(<span class="string">"phone:"</span>)</span><br><span class="line">        per=Person(name,address,phone)  <span class="comment"># 创建人物</span></span><br><span class="line">        self.person.append(per)   <span class="comment"># 加入到通讯录中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delPerson</span><span class="params">(self)</span>:</span></span><br><span class="line">        name=input(<span class="string">"请输入要删除人的姓名："</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.person)):</span><br><span class="line">            <span class="keyword">if</span> self.person[i].name==name:</span><br><span class="line">                <span class="keyword">del</span> self.person[i]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(len(self.person)):</span><br><span class="line">                    <span class="keyword">if</span> self.person[j]==name:</span><br><span class="line">                        print(<span class="string">"删除失败"</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"删除成功！"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">queryPerson</span><span class="params">(self)</span>:</span></span><br><span class="line">        name=input(<span class="string">"请输入要查询人的姓名："</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.person)):</span><br><span class="line">            <span class="keyword">if</span> self.person[i].name==name:</span><br><span class="line">                print(<span class="string">"&#123;&#125;"</span>.format(self.person[i].__dict__))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listAllPerson</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.person)):</span><br><span class="line">            print(<span class="string">"&#123;&#125;"</span>.format(self.person[i].__dict__))</span><br><span class="line"></span><br><span class="line">addressbook=AddressBook()  <span class="comment"># 初始化通讯录</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    begin()</span><br><span class="line">    x=int(input(<span class="string">"请输入功能序号（1-5）："</span>))</span><br><span class="line">    <span class="keyword">if</span> x==<span class="number">1</span>:</span><br><span class="line">        addressbook.addPerson()</span><br><span class="line">    <span class="keyword">if</span> x==<span class="number">2</span>:</span><br><span class="line">        addressbook.delPerson()</span><br><span class="line">    <span class="keyword">if</span> x==<span class="number">3</span>:</span><br><span class="line">        addressbook.queryPerson()</span><br><span class="line">    <span class="keyword">if</span> x==<span class="number">4</span>:</span><br><span class="line">        addressbook.listAllPerson()</span><br><span class="line">    <span class="keyword">if</span> x==<span class="number">5</span>:</span><br><span class="line">        quit()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>通讯录项目</title>
    <url>/2020/02/13/%E9%80%9A%E8%AE%AF%E5%BD%95%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="实现一个通讯录管理程序"><a href="#实现一个通讯录管理程序" class="headerlink" title="实现一个通讯录管理程序"></a>实现一个通讯录管理程序</h2><p>综合使用复合数据结构、控制流、函数等知识点</p>
<p>提供4项功能</p>
<blockquote>
<p> 创建联系人</p>
</blockquote>
<blockquote>
<p>删除联系人</p>
</blockquote>
<blockquote>
<p>查询联系人</p>
</blockquote>
<blockquote>
<p>列出所有联系人</p>
</blockquote>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">begin</span><span class="params">()</span>:</span>    <span class="comment"># 输出菜单</span></span><br><span class="line">    print(<span class="string">"1. creat person"</span>)</span><br><span class="line">    print(<span class="string">"2. delete person"</span>)</span><br><span class="line">    print(<span class="string">"3. query person"</span>)</span><br><span class="line">    print(<span class="string">"4. list all person"</span>)</span><br><span class="line">    print(<span class="string">"5. quit"</span>)</span><br><span class="line">    print(<span class="string">"Enter a number(1-5):"</span>,end=<span class="string">''</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat</span><span class="params">(x)</span>:</span>    <span class="comment"># 创建联系人</span></span><br><span class="line">    name=input(<span class="string">"name: "</span>)</span><br><span class="line">    address=input(<span class="string">"address: "</span>)</span><br><span class="line">    phone=int(input(<span class="string">"phone: "</span>))</span><br><span class="line">    h=&#123;&#125;</span><br><span class="line">    h[<span class="string">'name'</span>]=name</span><br><span class="line">    h[<span class="string">'address'</span>]=address</span><br><span class="line">    h[<span class="string">'phone'</span>]=phone</span><br><span class="line">    x.append(h)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(x)</span>:</span>   <span class="comment"># 删除联系人</span></span><br><span class="line">    <span class="keyword">if</span> len(x)==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"no person!"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    name=input(<span class="string">"name= "</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">        <span class="keyword">if</span> x[i][<span class="string">'name'</span>]==name:</span><br><span class="line">        	<span class="keyword">del</span> x[i]</span><br><span class="line">        	<span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"can not find such person!"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(x)</span>:</span>    <span class="comment"># 查找联系人</span></span><br><span class="line">    <span class="keyword">if</span> len(x)==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"no person!"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    name=input(<span class="string">'name: '</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">        <span class="keyword">if</span> x[i][<span class="string">'name'</span>]==name:</span><br><span class="line">            print(x[i])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"can not find such person!"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listall</span><span class="params">(x)</span>:</span>   <span class="comment"># 列出所有联系人</span></span><br><span class="line">    <span class="keyword">if</span> len(x)==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"no person!"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        print(i)</span><br><span class="line">        </span><br><span class="line">x=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    begin()</span><br><span class="line">    n=int(input())</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        creat(x)</span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">2</span>:</span><br><span class="line">        delete(x)</span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">3</span>:</span><br><span class="line">        query(x)</span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">4</span>:</span><br><span class="line">        listall(x)</span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Wrong number!"</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>函数</title>
    <url>/2020/02/10/%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><a id="more"></a>

<p>定义：</p>
<blockquote>
<p> 函数是可重复使用的，用来实现单一功能的代码段</p>
</blockquote>
<blockquote>
<p> 函数能提高应用的模块性和代码的重复利用率</p>
</blockquote>
<h2 id="定义函数："><a href="#定义函数：" class="headerlink" title="定义函数："></a>定义函数：</h2><blockquote>
<p>def 函数名（参数）：</p>
<p>​    函数体</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(a,b)</span>:</span>    <span class="comment"># 求两者中较大值的函数</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        print(a)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        print(b)</span><br></pre></td></tr></table></figure>

<h2 id="函数参数："><a href="#函数参数：" class="headerlink" title="函数参数："></a>函数参数：</h2><h3 id="使用关键字参数调用函数："><a href="#使用关键字参数调用函数：" class="headerlink" title="使用关键字参数调用函数："></a>使用关键字参数调用函数：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(b)</span><br><span class="line">    print(a)</span><br><span class="line">hi(<span class="number">1</span>,<span class="number">2</span>)   <span class="comment"># 不使用关键字参数函数调用</span></span><br><span class="line">hi(a=<span class="number">2</span>,b=<span class="number">1</span>)  <span class="comment"># 使用关键车子参数函数调用，a,b顺序可以调换</span></span><br></pre></td></tr></table></figure>

<p>一旦其中一个参数使用了关键字参数调用函数，其他参数也需要调用，否则可能会有错误发生。</p>
<h3 id="参数默认值："><a href="#参数默认值：" class="headerlink" title="参数默认值："></a>参数默认值：</h3><p>在定义函数的时候，可以设置一个参数为默认值，之后在调用时，不需要传入相应参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">(name=<span class="string">"卡布奇诺"</span>)</span>:</span>   <span class="comment"># 默认参数</span></span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">a=hi(<span class="string">"quechao"</span>)     <span class="comment"># 修改默认参数 </span></span><br><span class="line">b=hi()             <span class="comment"># 调用原函数，仍使用默认参数</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">--------------------</span><br><span class="line">quechao</span><br><span class="line">卡布奇诺</span><br></pre></td></tr></table></figure>

<p>python通过使用参数默认，可以实现类似函数重载的功能。参数默认值只需要定义一个函数而实现重载定义多个函数。</p>
<h3 id="可变参数："><a href="#可变参数：" class="headerlink" title="可变参数："></a>可变参数：</h3><p>python中函数的参数个数是可以变化的，它可以接受不确定数量的参数，这种参数叫做可变参数。python中可变参数有两种,在参数前加<em>或者*</em>形式，*可变参数在函数中被组装成一个元组，**可变参数在函数中被组装成一个字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># *可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tot</span><span class="params">(*num,sum=<span class="number">0</span>)</span>:</span></span><br><span class="line">    print(type(num))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">        sum+=i</span><br><span class="line">    print(sum)</span><br><span class="line">tot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tot(<span class="number">1</span>,*x)        <span class="comment"># *的作用为将x拆包为：1，2，3的形式</span></span><br><span class="line">------------------------</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">21</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">7</span></span><br><span class="line">==========================================</span><br><span class="line"><span class="comment"># **可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(sep=<span class="string">":"</span>,**info)</span>:</span></span><br><span class="line">    print(<span class="string">"----------"</span>)</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> info.items():</span><br><span class="line">        print(key,sep,value)</span><br><span class="line">show(<span class="string">"-&gt;"</span>,name=<span class="string">'as'</span>,age=<span class="number">12</span>,sex=<span class="literal">True</span>)  <span class="comment"># -&gt;给sep，后面生成字典键值对</span></span><br><span class="line">stu=&#123;<span class="string">"name"</span>:<span class="string">"jo"</span>,<span class="string">"age"</span>:<span class="number">12</span>&#125;</span><br><span class="line">show(**stu)   <span class="comment"># **将字典里面的内容拆包成键值对</span></span><br><span class="line">----------------------</span><br><span class="line">----------</span><br><span class="line">name -&gt; as</span><br><span class="line">age -&gt; 12</span><br><span class="line">sex -&gt; True</span><br><span class="line">----------</span><br><span class="line">name : jo</span><br><span class="line">age : <span class="number">12</span></span><br></pre></td></tr></table></figure>

<h2 id="函数返回值："><a href="#函数返回值：" class="headerlink" title="函数返回值："></a>函数返回值：</h2><blockquote>
<p>无返回值，单一返回值和多返回值</p>
</blockquote>
<h3 id="无返回值："><a href="#无返回值：" class="headerlink" title="无返回值："></a>无返回值：</h3><p>有的函数只是为了处理某个过程，没有返回值。事实上是返回了N哦呢，表示没有意义。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">()</span>:</span>          <span class="comment"># 没有返回值，只是一个输出</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="单一返回值："><a href="#单一返回值：" class="headerlink" title="单一返回值："></a>单一返回值：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">()</span>:</span>      <span class="comment"># 函数返回一个值，调用该函数就会获得返回的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    a=hi()</span><br><span class="line">    print(a)   <span class="comment"># a=12</span></span><br></pre></td></tr></table></figure>

<h3 id="多返回值："><a href="#多返回值：" class="headerlink" title="多返回值："></a>多返回值：</h3><p>使用元组返回多个返回值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    a=hi()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>

<h2 id="函数变量作用域："><a href="#函数变量作用域：" class="headerlink" title="函数变量作用域："></a>函数变量作用域：</h2><blockquote>
<p>全局变量：程序内有效</p>
<p>局部变量：出了函数就没有用了</p>
<p>如果在局部中出现了全局变量的改变，除非是用global方法，不然不会影响全局变量</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">20</span>    <span class="comment"># 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">(x)</span>:</span></span><br><span class="line">    y=<span class="number">13</span>   <span class="comment"># 局部变量</span></span><br><span class="line">    print(x,y)</span><br><span class="line">    x=<span class="number">14</span>   <span class="comment"># 局部变量</span></span><br><span class="line">    print(x)</span><br><span class="line">hi(x)      <span class="comment"># 调用函数</span></span><br><span class="line">print(x)   <span class="comment"># x为全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x   <span class="comment"># 修改全局变量</span></span><br><span class="line">    x=<span class="number">10</span></span><br><span class="line">h()        <span class="comment"># 调用函数</span></span><br><span class="line">print(x)</span><br><span class="line">------------------</span><br><span class="line"><span class="number">20</span> <span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="生成器："><a href="#生成器：" class="headerlink" title="生成器："></a>生成器：</h2><p>在一个函数中常用return后返回数据，但有时候会使用yield关键字返回数据，使用yield关键字的函数返回的是一个生成器(generator)对象，可迭代。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算平方数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fang</span><span class="params">(n)</span>:</span>   <span class="comment"># 一般方法</span></span><br><span class="line">    x=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        x.append(i**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">list=fang(<span class="number">5</span>)</span><br><span class="line">print(type(list))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">    print(i)</span><br><span class="line">---------------------</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class">1</span></span><br><span class="line"><span class="class">4</span></span><br><span class="line"><span class="class">9</span></span><br><span class="line"><span class="class">16</span></span><br><span class="line"><span class="class">25</span></span><br><span class="line">=========================</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fang</span><span class="params">(n)</span>:</span>      <span class="comment"># 使用生成器</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">yield</span> i**<span class="number">2</span></span><br><span class="line">x=fang(<span class="number">5</span>)</span><br><span class="line">print(type(x))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(i)</span><br><span class="line">-----------------------------</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">generator</span>'&gt;</span></span><br><span class="line"><span class="class">1</span></span><br><span class="line"><span class="class">4</span></span><br><span class="line"><span class="class">9</span></span><br><span class="line"><span class="class">16</span></span><br><span class="line"><span class="class">25</span></span><br></pre></td></tr></table></figure>

<p>生成器对象是一种可迭代的对象，可迭代对象通过__next__()方法获得元素。使用for循环打印生成器元素，就是隐形调用了该方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fang</span><span class="params">(n)</span>:</span>      <span class="comment"># 使用生成器</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">yield</span> i**<span class="number">2</span></span><br><span class="line">x=fang(<span class="number">5</span>)</span><br><span class="line">print(x.__next__())</span><br><span class="line">print(x.__next__())</span><br><span class="line">---------------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>生成器使用yield返回数据与一般函数用return返回数据不同，它是先返回一个数据，然后函数暂停，知道再次调用__next__方法，才会进行下一步，而return则是返回后就停止函数。</p>
<p><img src="https://s2.ax1x.com/2020/02/10/14LATe.png" alt="14LATe.png"></p>
<h2 id="嵌套函数："><a href="#嵌套函数：" class="headerlink" title="嵌套函数："></a>嵌套函数：</h2><p>函数还可以被定义在另一个函数里面，称作嵌套函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">suan</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(e,f)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> e+f</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jian</span><span class="params">(g,h)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> g-h</span><br><span class="line">    <span class="keyword">if</span> c==<span class="string">"+"</span>:</span><br><span class="line">        print(sum(a,b))</span><br><span class="line">    <span class="keyword">if</span> c==<span class="string">"-"</span>:</span><br><span class="line">        print(jian(a,b))</span><br><span class="line">suan(<span class="number">1</span>,<span class="number">2</span>,<span class="string">"+"</span>)</span><br><span class="line">------------------</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>嵌套在函数内部的函数，无法在函数外部访问，否则会报错。</p>
<h2 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h2><h3 id="Lambda函数："><a href="#Lambda函数：" class="headerlink" title="Lambda函数："></a>Lambda函数：</h3><p>Lambda函数本质上是一种匿名函数。</p>
<blockquote>
<p>lambda 参数列表: Lambda 体</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="keyword">lambda</span> a,b: a+b</span><br><span class="line">print(x(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">-------------</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="三大基础函数"><a href="#三大基础函数" class="headerlink" title="三大基础函数"></a>三大基础函数</h3><blockquote>
<p>filter函数</p>
<p>map函数</p>
<p>reduce函数</p>
</blockquote>
<h4 id="filter函数："><a href="#filter函数：" class="headerlink" title="filter函数："></a>filter函数：</h4><p> filter 函数将可迭代的对象元素进行筛选：</p>
<blockquote>
<p> filter(function,iterable)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span>==<span class="number">0</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)):</span><br><span class="line">  print(i) <span class="comment"># 选择偶数</span></span><br><span class="line"></span><br><span class="line">L=[<span class="string">'asd'</span>,<span class="string">'fsdf'</span>,<span class="string">'asdaad'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filter(<span class="keyword">lambda</span> x:x.startswith(<span class="string">'a'</span>),L):</span><br><span class="line">	print(i)  <span class="comment"># 选择开头是“a"字母的</span></span><br><span class="line">-----------------------------</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">asd</span><br><span class="line">asdaad</span><br></pre></td></tr></table></figure>

<h4 id="map函数："><a href="#map函数：" class="headerlink" title="map函数："></a>map函数：</h4><p> map函数适用于映射操作，可以将迭代对象的元素进行变换: </p>
<blockquote>
<p> map(function,iterable)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L=[<span class="string">'asds'</span>,<span class="string">'DAFSD'</span>,<span class="string">'ADAsad'</span>]</span><br><span class="line"></span><br><span class="line">l=map(<span class="keyword">lambda</span> x:x.lower(),L)  <span class="comment"># 将L中元素变为小写后映射给l</span></span><br><span class="line"></span><br><span class="line">print(list(l))  </span><br><span class="line">-------------------------</span><br><span class="line">[<span class="string">'asds'</span>, <span class="string">'dafsd'</span>, <span class="string">'adasad'</span>]</span><br></pre></td></tr></table></figure>

<h4 id="reduce函数："><a href="#reduce函数：" class="headerlink" title="reduce函数："></a>reduce函数：</h4><p>reduce函数是将多个数据累计进行函数运算：</p>
<blockquote>
<p>reduce(function,iterable)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">l=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(reduce(<span class="keyword">lambda</span> x,y:x+y,l))  <span class="comment"># 将l中的元素累加</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2020/02/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>常见的数据结构有数组，集合。列表，队列，链表，树，堆，栈和字典的等结构。</p>
<a id="more"></a>

<h2 id="序列："><a href="#序列：" class="headerlink" title="序列："></a>序列：</h2><p>序列是一种可迭代的，元素有序，可重复出现的数据结构。序列可以通过索引访问元素。</p>
<p>序列包括的结构有：元组，列表，字符串，范围和字节序列。</p>
<p>序列可进行的操作有: 索引，分片，加和乘。</p>
<h4 id="索引操作："><a href="#索引操作：" class="headerlink" title="索引操作："></a>索引操作：</h4><p>序列中第一个元素的索引是0，此后依次增加。</p>
<table>
<thead>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
</tr>
</thead>
<tbody><tr>
<td>H</td>
<td>e</td>
<td>l</td>
<td>l</td>
<td>o</td>
<td></td>
<td>w</td>
<td>o</td>
<td>r</td>
<td>l</td>
<td>d</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>0</th>
<th>-10</th>
<th>-9</th>
<th>-8</th>
<th>-7</th>
<th>-6</th>
<th>-5</th>
<th>-4</th>
<th>-3</th>
<th>-2</th>
<th>-1</th>
</tr>
</thead>
<tbody><tr>
<td>H</td>
<td>e</td>
<td>l</td>
<td>l</td>
<td>o</td>
<td></td>
<td>w</td>
<td>o</td>
<td>r</td>
<td>l</td>
<td>d</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">"Hello world"</span></span><br><span class="line">print(a[<span class="number">1</span>])</span><br><span class="line">print(a[<span class="number">-5</span>])</span><br><span class="line">-------------------</span><br><span class="line">e</span><br><span class="line">w</span><br></pre></td></tr></table></figure>

<h4 id="序列的加和乘："><a href="#序列的加和乘：" class="headerlink" title="序列的加和乘："></a>序列的加和乘：</h4><p>“+”可以将两个序列连接起来，”*“可以使一个序列重复出现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b=[<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>]</span><br><span class="line">print(a+b)</span><br><span class="line">print(b*<span class="number">2</span>)</span><br><span class="line">--------------</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>

<h4 id="序列分片："><a href="#序列分片：" class="headerlink" title="序列分片："></a>序列分片：</h4><p>序列的切片就是从序列中切分出小的子序列。</p>
<p>分片的两种形式：</p>
<blockquote>
<p>[start:end],start表示开始的索引位，end表示结束时的索引位。不写start默认是0开始，不写end默认是到最后。左闭右开</p>
<p>[start​ : end : ​step​],step表示步长，获取元素的间隔，步长既可以是正的也可以是负的。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print(x[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print(x[::<span class="number">-1</span>])</span><br><span class="line">--------------</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="元组："><a href="#元组：" class="headerlink" title="元组："></a>元组：</h2><h3 id="创建元组："><a href="#创建元组：" class="headerlink" title="创建元组："></a>创建元组：</h3><p>元组是一种不可变序列，一旦创建就不可修改。创建元组可以使用tuple函数或者直接用（）加，创建。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=tuple([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">y=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line">print(type(x))</span><br><span class="line">print(type(y))	</span><br><span class="line">------------------------</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="访问元组："><a href="#访问元组：" class="headerlink" title="访问元组："></a>访问元组：</h3><p>通过索引和分片可以实现，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(x[<span class="number">1</span>])</span><br><span class="line">print(x[::<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(i)</span><br><span class="line">print(x)</span><br><span class="line">-------------</span><br><span class="line"><span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>元组还可以进行拆包操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">a1,a2,a3,a4=x</span><br><span class="line">print(a1)</span><br><span class="line">print(a2)</span><br><span class="line">print(a3)</span><br><span class="line">print(a4)</span><br><span class="line">-----------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">==========</span><br><span class="line"><span class="comment"># 如果有内容不想取</span></span><br><span class="line">a1,_,a2,_=x    <span class="comment"># 第二个和第四个值没有取</span></span><br><span class="line">print(a1)</span><br><span class="line">print(a2)</span><br><span class="line">-------------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历元组："><a href="#遍历元组：" class="headerlink" title="遍历元组："></a>遍历元组：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(x):      <span class="comment"># enumerate函数可以获取元组的对象（索引和数值）</span></span><br><span class="line">    print(<span class="string">"&#123;&#125;-&#123;&#125;"</span>.format(i,j))</span><br><span class="line">--------------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0</span><span class="number">-1</span></span><br><span class="line"><span class="number">1</span><span class="number">-2</span></span><br><span class="line"><span class="number">2</span><span class="number">-3</span></span><br><span class="line"><span class="number">3</span><span class="number">-4</span></span><br></pre></td></tr></table></figure>

<p><strong>上述遍历方式可适用于所有序列</strong></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表可以追加元素，修改元素。</p>
<h3 id="创建列表："><a href="#创建列表：" class="headerlink" title="创建列表："></a>创建列表：</h3><p>创建列表可以使用list函数，或者用[]和”,”。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y=list((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(x)</span><br><span class="line">print(type(x))</span><br><span class="line">print(y)</span><br><span class="line">print(type(y))</span><br><span class="line">-----------------</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line">[1, 2, 3]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="追加元素："><a href="#追加元素：" class="headerlink" title="追加元素："></a>追加元素：</h3><p>列表可以使用append()方法添加元素，如果需要加上另一个列表可以使用”+“，也可以用extend（）方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">x.append(<span class="number">9</span>)</span><br><span class="line">print(x)</span><br><span class="line">x=x+y</span><br><span class="line">print(x)</span><br><span class="line">y.extend(x)</span><br><span class="line">print(y)</span><br><span class="line">-------------------</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<h3 id="插入元素："><a href="#插入元素：" class="headerlink" title="插入元素："></a>插入元素：</h3><p>可以使用insert（）方法，需要先写索引位置，再写数字。</p>
<blockquote>
<p>list.insert(suoyin,shuzi)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">x.insert(<span class="number">0</span>,<span class="number">1</span>)    <span class="comment"># 在索引为0的地方插入1</span></span><br><span class="line">print(x)</span><br><span class="line">---------</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h3 id="替换元素："><a href="#替换元素：" class="headerlink" title="替换元素："></a>替换元素：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">x[<span class="number">0</span>]=<span class="number">2</span>    <span class="comment"># 将索引为0的数据替换成2</span></span><br><span class="line">print(x)</span><br><span class="line">----------</span><br><span class="line">[<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h3 id="删除元素："><a href="#删除元素：" class="headerlink" title="删除元素："></a>删除元素：</h3><blockquote>
<p>remove()方法</p>
<p>pop()方法</p>
</blockquote>
<h4 id="remove-方法："><a href="#remove-方法：" class="headerlink" title="remove()方法："></a>remove()方法：</h4><p>从左到右查找列表中的元素，如果找到匹配的就删除，且只删除第一个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">x.remove(<span class="number">2</span>)</span><br><span class="line">print(x)</span><br><span class="line">---------------</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">(i,list)</span>:</span>   <span class="comment"># 使用递归，删除全部需要删除的</span></span><br><span class="line">    sum=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> list:</span><br><span class="line">        <span class="keyword">if</span> j==i:</span><br><span class="line">            sum+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> sum==<span class="number">0</span>:</span><br><span class="line">        print(list)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    list.remove(i)</span><br><span class="line">    hi(i,list)</span><br><span class="line">x=[<span class="string">'12'</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">12</span>,<span class="string">'12'</span>,<span class="string">'23'</span>,<span class="string">'12'</span>]</span><br><span class="line">hi(<span class="string">'12'</span>,x)</span><br><span class="line">------------------------</span><br><span class="line">[<span class="number">12</span>,<span class="number">23</span>,<span class="number">12</span>,<span class="string">'23'</span>]</span><br></pre></td></tr></table></figure>



<h4 id="pop-方法："><a href="#pop-方法：" class="headerlink" title="pop()方法："></a>pop()方法：</h4><blockquote>
<p>list.pop(i)  i表示删除的索引，如果i不写，表示删除最后一个元素。还会返回删除索引处的元素</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">ret=x.pop(<span class="number">2</span>)   <span class="comment"># 删除索引为2的元素，并返回这个元素给ret</span></span><br><span class="line">print(ret)</span><br><span class="line">print(x)</span><br><span class="line">---------------</span><br><span class="line"><span class="number">3</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h3 id="其他常用方法："><a href="#其他常用方法：" class="headerlink" title="其他常用方法："></a>其他常用方法：</h3><blockquote>
<p>reverse(): 倒置列表</p>
<p>copy(): 复制列表</p>
<p>clear(): 清空列表</p>
<p>index(x[,i[,j]])：返回查找x第一次出现的索引，i是开始查照的索引，j是结束的索引。序列都可用这个方法。</p>
<p>count(x): 返回x出现的次数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">x.reverse()</span><br><span class="line">print(x)</span><br><span class="line">y=x.copy()</span><br><span class="line">print(y)</span><br><span class="line">x.clear()</span><br><span class="line">print(x)</span><br><span class="line">num=y.index(<span class="number">2</span>)</span><br><span class="line">print(num)</span><br><span class="line">print(y.count(<span class="number">2</span>))</span><br><span class="line">--------------------------</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[]</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="列表推导式："><a href="#列表推导式：" class="headerlink" title="列表推导式："></a>列表推导式：</h3><p>推导式可以将一种数据结构作为输入，经过过滤，计算等处理，最后输出另一种数据结构。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    list.append(i)</span><br><span class="line">print(list)</span><br><span class="line">list.clear()</span><br><span class="line">print(list)</span><br><span class="line">list=[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(list)</span><br><span class="line">--------------------------------</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<h3 id="遍历集合："><a href="#遍历集合：" class="headerlink" title="遍历集合："></a>遍历集合：</h3><p>集合是无序的，没有索引，不能通过下标索引的。但是可以遍历集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=&#123;<span class="string">'qwe'</span>,<span class="string">'asd'</span>,<span class="string">'zxc'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:    <span class="comment"># 遍历</span></span><br><span class="line">    print(i)</span><br><span class="line">print(x[<span class="number">0</span>])    <span class="comment"># 索引  </span></span><br><span class="line">---------------------</span><br><span class="line">asd</span><br><span class="line">qwe</span><br><span class="line">zxc</span><br><span class="line">Traceback (most recent call last):     <span class="comment"># 索引失败</span></span><br><span class="line">  File <span class="string">"F:\draft\mian.py"</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(x[<span class="number">0</span>])</span><br><span class="line">TypeError: <span class="string">'set'</span> object <span class="keyword">is</span> <span class="keyword">not</span> subscriptable</span><br></pre></td></tr></table></figure>

<h3 id="不可变集合："><a href="#不可变集合：" class="headerlink" title="不可变集合："></a>不可变集合：</h3><p>不可变集合的类型是frozenset, 创建不可变集合使用 ：</p>
<blockquote>
<p>frozenset([iterable])</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=frozenset(&#123;<span class="string">'qwe'</span>,<span class="string">'asd'</span>,<span class="string">'zxc'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">frozenset(&#123;<span class="string">'asd'</span>, <span class="string">'qwe'</span>, <span class="string">'zxc'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(x)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">frozenset</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">x</span>.<span class="title">add</span><span class="params">(<span class="string">'123'</span>)</span></span></span><br><span class="line"><span class="class"><span class="title">AttributeError</span>:</span> <span class="string">'frozenset'</span> object has no attribute <span class="string">'add'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.append(<span class="number">123</span>)</span><br><span class="line">AttributeError: <span class="string">'frozenset'</span> object has no attribute <span class="string">'append'</span></span><br></pre></td></tr></table></figure>

<h3 id="集合推导式："><a href="#集合推导式：" class="headerlink" title="集合推导式："></a>集合推导式：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=&#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line">print(x)</span><br><span class="line">-------------------------</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典是由两个部分构成：键（key），值（value）。</p>
<h3 id="创建字典："><a href="#创建字典：" class="headerlink" title="创建字典："></a>创建字典：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=&#123;<span class="number">1</span>:<span class="string">'1'</span>,<span class="number">2</span>:<span class="string">'2'</span>,<span class="string">'3'</span>:<span class="number">3</span>&#125;    <span class="comment"># 使用花括号，用冒号分隔键值对，逗号分隔数据</span></span><br><span class="line">print(x)</span><br><span class="line">print(type(x))</span><br><span class="line">y=dict(x)</span><br><span class="line">print(y)</span><br><span class="line">print(type(y))</span><br><span class="line">z=dict(((<span class="number">1</span>,<span class="string">'1'</span>),(<span class="number">2</span>,<span class="string">'2'</span>),(<span class="string">'3'</span>,<span class="number">3</span>)))   </span><br><span class="line"><span class="comment"># 用dict函数，将一个个元组内数据进行键值配对</span></span><br><span class="line">print(z)</span><br><span class="line">print(type(z))</span><br><span class="line">h=dict(zip([<span class="number">1</span>,<span class="number">2</span>,<span class="string">'3'</span>],[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="number">3</span>]))</span><br><span class="line"><span class="comment"># 使用zip（）函数，将两个可迭代的对象打包成两个数据的元组，在进行键值配对。</span></span><br><span class="line">print(h)</span><br><span class="line">print(type(h))</span><br><span class="line">==========================</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">'1'</span>, <span class="number">2</span>: <span class="string">'2'</span>, <span class="string">'3'</span>: <span class="number">3</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;1: '1', 2: '2', '3': 3&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;1: '1', 2: '2', '3': 3&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;1: '1', 2: '2', '3': 3&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改字典："><a href="#修改字典：" class="headerlink" title="修改字典："></a>修改字典：</h3><p>字典可以进行增加，修改，删除的操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=&#123;<span class="number">1</span>:<span class="string">'1'</span>,<span class="number">2</span>:<span class="string">'2'</span>,<span class="number">3</span>:<span class="string">'3'</span>&#125;</span><br><span class="line">x[<span class="number">4</span>]=<span class="string">'4'</span>    <span class="comment"># 添加</span></span><br><span class="line">x[<span class="number">1</span>]=<span class="string">'0'</span>    <span class="comment"># 修改</span></span><br><span class="line"><span class="keyword">del</span> x[<span class="number">3</span>]    <span class="comment"># 删除</span></span><br><span class="line">print(x)</span><br><span class="line">------------------</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">'0'</span>, <span class="number">2</span>: <span class="string">'2'</span>, <span class="number">4</span>: <span class="string">'4'</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="访问字典："><a href="#访问字典：" class="headerlink" title="访问字典："></a>访问字典：</h3><blockquote>
<ol>
<li>get(key[,default]): 通过键返回值</li>
<li>items(): 返回字典的所有键值对</li>
<li>keys()：返回字典键视图</li>
<li>values()：返回字典值视图</li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=&#123;<span class="number">1</span>:<span class="string">'1'</span>,<span class="number">2</span>:<span class="string">'2'</span>,<span class="number">3</span>:<span class="string">'3'</span>&#125;</span><br><span class="line">a=x.get(<span class="number">1</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(x.items())</span><br><span class="line">print(x.keys())</span><br><span class="line">print(x.values())</span><br><span class="line">------------------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line">dict_items([(<span class="number">1</span>, <span class="string">'1'</span>), (<span class="number">2</span>, <span class="string">'2'</span>), (<span class="number">3</span>, <span class="string">'3'</span>)])</span><br><span class="line">dict_keys([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">dict_values([<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])</span><br></pre></td></tr></table></figure>

<h3 id="遍历字典："><a href="#遍历字典：" class="headerlink" title="遍历字典："></a>遍历字典：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=&#123;<span class="number">1</span>:<span class="string">'2'</span>,<span class="number">2</span>:<span class="string">'3'</span>,<span class="number">3</span>:<span class="string">'4'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(i)</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x.keys():</span><br><span class="line">    print(x[i])</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> x.items():</span><br><span class="line">    print(<span class="string">"&#123;&#125;:&#123;&#125;"</span>.format(i,j))</span><br><span class="line">------------------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">**********</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">**********</span><br><span class="line"><span class="number">1</span>:<span class="number">2</span></span><br><span class="line"><span class="number">2</span>:<span class="number">3</span></span><br><span class="line"><span class="number">3</span>:<span class="number">4</span></span><br><span class="line"><span class="number">3</span>:<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="字典推导式："><a href="#字典推导式：" class="headerlink" title="字典推导式："></a>字典推导式：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=&#123;<span class="number">1</span>:<span class="string">'q'</span>,<span class="number">2</span>:<span class="string">'w'</span>,<span class="number">3</span>:<span class="string">'e'</span>&#125;</span><br><span class="line">i=&#123;k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> x.items() <span class="keyword">if</span> k%<span class="number">2</span>!=<span class="number">0</span>&#125;</span><br><span class="line">print(i)</span><br><span class="line">------------</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">'q'</span>, <span class="number">3</span>: <span class="string">'e'</span>&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom=&#123;<span class="string">"name"</span>:<span class="string">"tom"</span>,<span class="string">"phone"</span>:<span class="number">123</span>&#125;</span><br><span class="line">jack=&#123;<span class="string">"name"</span>:<span class="string">"jack"</span>,<span class="string">"phone"</span>:<span class="number">234</span>&#125;</span><br><span class="line">list=[tom,jack]</span><br><span class="line">print(list)</span><br><span class="line">------------------------</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'tom'</span>, <span class="string">'phone'</span>: <span class="number">123</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'jack'</span>, <span class="string">'phone'</span>: <span class="number">234</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>列表，元组，字典都是可以相互套用的，在学习完下一章函数后可以运用函数和数据结构写出通讯录。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>控制语句</title>
    <url>/2020/02/08/%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1><p>程序设计中的控制语句包括：顺序，分支和循环语句。可以相互组成，可以相互独立使用。</p>
<a id="more"></a>

<h2 id="分支语句："><a href="#分支语句：" class="headerlink" title="分支语句："></a>分支语句：</h2><p>分支语句使得程序获得了“判断力”。分支语句也叫条件语句，可以根据语句判断进行相应的操作。</p>
<blockquote>
<p>if</p>
<p>if-else</p>
<p>elif</p>
</blockquote>
<h3 id="if结构："><a href="#if结构：" class="headerlink" title="if结构："></a>if结构：</h3><blockquote>
<p>if 内容：</p>
<p>​    &lt;语句&gt;</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> b&gt;a:</span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure>

<h3 id="if-else结构："><a href="#if-else结构：" class="headerlink" title="if-else结构："></a>if-else结构：</h3><blockquote>
<p>if 内容：</p>
<p>​    &lt;语句&gt;</p>
<p>else :</p>
<p>​    &lt;语句&gt;</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> b&gt;a:</span><br><span class="line">    print(b)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure>

<h3 id="elif结构："><a href="#elif结构：" class="headerlink" title="elif结构："></a>elif结构：</h3><p>在使用if-else结构时，如果出翔多个else 语句，可以使用elif结构。</p>
<blockquote>
<p>if 内容：</p>
<p>​    &lt;语句&gt;</p>
<p>elif 内容：</p>
<p>​    &lt;语句&gt;</p>
<p>elif 内容：</p>
<p>​    &lt;语句&gt;</p>
<p>else:</p>
<p>​    &lt;语句&gt;</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">elif</span> a&lt;b:</span><br><span class="line">    print(b)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">"a=b"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="三元运算符替代品—条件表达式："><a href="#三元运算符替代品—条件表达式：" class="headerlink" title="三元运算符替代品—条件表达式："></a>三元运算符替代品—条件表达式：</h3><blockquote>
<p>表达式1 if 条件 else 表达式2</p>
<p>// 在两个表达式中选其一</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a= <span class="string">"dsa"</span> <span class="keyword">if</span> <span class="number">1</span>&lt;<span class="number">2</span> <span class="keyword">else</span> <span class="string">"sda"</span></span><br><span class="line">print(a)</span><br><span class="line">================</span><br><span class="line">sda</span><br></pre></td></tr></table></figure>

<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>循环语句能使代码重复使用。</p>
<h3 id="while语句："><a href="#while语句：" class="headerlink" title="while语句："></a>while语句：</h3><p>while语句是一种先判断后循环的语句，需要先进行判断，是否符合while后面的条件。</p>
<blockquote>
<p>while 条件:</p>
<p>​    &lt;内容&gt;</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">9</span>:</span><br><span class="line">    print(<span class="string">"asd"</span>)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">---------------</span><br><span class="line">asd</span><br><span class="line">asd</span><br><span class="line">asd</span><br><span class="line">asd</span><br><span class="line">asd</span><br><span class="line">asd</span><br><span class="line">asd</span><br><span class="line">asd</span><br><span class="line">asd</span><br></pre></td></tr></table></figure>

<h3 id="for-语句："><a href="#for-语句：" class="headerlink" title="for 语句："></a>for 语句：</h3><p>python的for语句只用于序列（字符串，列表，元组，字典）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">123</span>,<span class="number">342</span>,<span class="number">453</span>,<span class="number">123</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(i)</span><br><span class="line">print(<span class="string">"***"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):   <span class="comment"># range(b)表示从0到b，左闭右开，len(x)表示x的长度  </span></span><br><span class="line">    print(x[i])</span><br><span class="line">-------------</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">342</span></span><br><span class="line"><span class="number">453</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">***</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">342</span></span><br><span class="line"><span class="number">453</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>

<h2 id="跳转语句："><a href="#跳转语句：" class="headerlink" title="跳转语句："></a>跳转语句：</h2><blockquote>
<p>break,continue,return</p>
</blockquote>
<p>跳转语句可以实现程序语句的执行顺序改变。</p>
<h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>break语句可用于while和for语句，用于强制跳出当前一级的循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">9</span>:</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span>           <span class="comment"># 跳出while循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">-----------------</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">===========================</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="number">9</span>:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span>        <span class="comment"># 只跳出while循环</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(i)</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">"***"</span>)</span><br><span class="line">-------------------------------</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">***</span><br><span class="line">***</span><br><span class="line">***</span><br><span class="line">***</span><br><span class="line">***</span><br><span class="line">***</span><br><span class="line">***</span><br><span class="line">***</span><br><span class="line">***</span><br><span class="line">***</span><br></pre></td></tr></table></figure>

<h3 id="continue-语句："><a href="#continue-语句：" class="headerlink" title="continue 语句："></a>continue 语句：</h3><p>跳过本循环下面未执行的程序语句，进行下一轮循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">9</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span>    <span class="comment"># 当i等于三时不进行下面的语句</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i)</span><br><span class="line">------------------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<h2 id="while，for与else的合用："><a href="#while，for与else的合用：" class="headerlink" title="while，for与else的合用："></a>while，for与else的合用：</h2><p>当while，for语句在执行过程中没有中断，没有运行break，return时，才会执行下面的else语句。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">9</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i)</span><br><span class="line">-----------------------没有被打断</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">===================================</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">9</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i)</span><br><span class="line">    	</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i)</span><br><span class="line">----------------------------------被<span class="keyword">break</span>打断，没有执行<span class="keyword">else</span>下面的语句</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>运算符</title>
    <url>/2020/02/08/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>在python中的运算符包括算术运算符，关系运算符，逻辑运算符，位运算符和其他运算符。</p>
<a id="more"></a>

<h2 id="算术运算符："><a href="#算术运算符：" class="headerlink" title="算术运算符："></a>算术运算符：</h2><blockquote>
<p>一元运算符</p>
<p>二元运算符</p>
</blockquote>
<h3 id="一元运算符："><a href="#一元运算符：" class="headerlink" title="一元运算符："></a>一元运算符：</h3><p>python中有多个一元运算符，但是算术一元运算符只有一个，就是负号（-），- 是取反运算符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>-a</span><br><span class="line"><span class="number">-12</span></span><br></pre></td></tr></table></figure>

<h3 id="二元运算符："><a href="#二元运算符：" class="headerlink" title="二元运算符："></a>二元运算符：</h3><p><strong>a+b : a加b</strong></p>
<p><strong>a-b :  a减b</strong></p>
<p><strong>a*b :  a乘b</strong></p>
<p><strong>a/b :  a除以b</strong></p>
<p><strong>a%b: a除以b取余</strong></p>
<p><strong>a//b: a整除以b,表示的是返回a除以b的结果的整数部分，而不是证明了a能被b整除。要证明a能被b整除，可以是if a%b==0: 或者a/b＝int 等等</strong></p>
<p><strong>a\</strong>b : a的b次方**</p>
<p>算数运算符同样可以作用于字符串的操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">1</span>+<span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>%<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>//<span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>**<span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">"hi"</span>+<span class="string">"jack"</span></span><br><span class="line"><span class="string">'hijack'</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">"hi"</span>*<span class="number">2</span></span><br><span class="line"><span class="string">'hihi'</span></span><br></pre></td></tr></table></figure>

<h2 id="关系运算符："><a href="#关系运算符：" class="headerlink" title="关系运算符："></a>关系运算符：</h2><p><strong>a==b : a和b相等则为Ture</strong></p>
<p><strong>a!=b: a和b不相等则为Ture</strong></p>
<p><strong>a&gt;b: a大于b，返回True</strong></p>
<p><strong>a&lt;b: a小于b，返回True</strong></p>
<p><strong>a&lt;=b: a小于等于b，返回True</strong></p>
<p><strong>a&gt;=b: a大于等于b，返回True</strong></p>
<p>若不成立就返回False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">1</span>&gt;<span class="number">2</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>&gt;<span class="number">0</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>python中关系运算符同样可以运用到序列当中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a&gt;b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a&gt;b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a&lt;b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">"world"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">"worl"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a&gt;b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符："><a href="#逻辑运算符：" class="headerlink" title="逻辑运算符："></a>逻辑运算符：</h2><blockquote>
<ul>
<li><p>not:</p>
<p>逻辑非，样例：not A。事件A为True时，not A 为False，反之亦然。</p>
</li>
<li><p>and：</p>
<p>逻辑与，样例：A and B。事件A为True且B为True时，A and B为True；当A 为True时，若B为False，则结果为False；当A为False时，不再考虑B的值，结果为False。</p>
</li>
<li><p>or：</p>
<p>逻辑或，样例：A or B。只有A和B都是False，结果为False，否则结果为True。</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a=<span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b=<span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c=<span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">not</span> a&gt;b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;a&gt;b <span class="keyword">and</span> c&gt;b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;a&gt;b <span class="keyword">or</span> c&gt;b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符常用在选择判断语句之中，在后面会介绍到。</span></span><br><span class="line">如： </span><br><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">    .....</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure>

<h2 id="位运算符："><a href="#位运算符：" class="headerlink" title="位运算符："></a>位运算符：</h2><p>位运算符是以二进位为单位进行运算，操作数和结果都是整形数据。</p>
<p><img src="https://s2.ax1x.com/2020/02/06/1ybbzd.png" alt="1ybbzd.png"></p>
<p><a href="https://baike.baidu.com/item/二进制/361457?fr=aladdin" target="_blank" rel="noopener">二进制内容相关</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因为是二进位为单位，所以需要将数字转化为二进制</span></span><br><span class="line">&gt;&gt;&gt;a=<span class="number">3</span>   <span class="comment"># 二进制为0000 0011</span></span><br><span class="line">&gt;&gt;&gt;b=<span class="number">7</span>   <span class="comment"># 二进制为0000 0111</span></span><br><span class="line">&gt;&gt;&gt;a&amp;b   <span class="comment"># 详细过程是0011（前面加0，使个数对应）和0111对应位置的数字如果都为1，就变成1，如果不是就是0</span></span><br><span class="line"><span class="number">3</span>        <span class="comment"># 结果为0000 0011</span></span><br><span class="line">&gt;&gt;&gt;a|b</span><br><span class="line"><span class="number">7</span>        <span class="comment"># 结果为0000 0111</span></span><br><span class="line">&gt;&gt;&gt;~a</span><br><span class="line"><span class="number">-4</span>       <span class="comment"># 结果为-0b100，对数据的每个二进制位取反,即把1变为0,把0变为1，类似于~x=(-x-1)</span></span><br><span class="line">&gt;&gt;&gt;a^b</span><br><span class="line"><span class="number">4</span>        <span class="comment"># 结果为0000 0100，对应的二进位数不同变为1，其余为0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a&lt;&lt;<span class="number">2</span></span><br><span class="line"><span class="number">12</span>       <span class="comment"># 结果为0000 1100，二进位全部想左移两位，后面加上0.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b&gt;&gt;<span class="number">2</span></span><br><span class="line"><span class="number">1</span>        <span class="comment"># 结果为0000 0001，二进位全部向右移2位。</span></span><br></pre></td></tr></table></figure>

<p><strong>位运算中的左移相当于整数乘以$2^n$,右移相当于除以$2^n$</strong></p>
<h2 id="赋值运算符："><a href="#赋值运算符：" class="headerlink" title="赋值运算符："></a>赋值运算符：</h2><p>赋值运算符更像是一种简写，将运算符与赋值相结合。</p>
<p><img src="https://s2.ax1x.com/2020/02/06/16peTs.png" alt="16peTs.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a=<span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;b=<span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;a+=b      <span class="comment"># 相当于a=a+b</span></span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line"><span class="number">10</span>           <span class="comment"># 二进制 1010</span></span><br><span class="line">&gt;&gt;&gt;a&lt;&lt;=<span class="number">2</span>     <span class="comment"># 相当于a=a&lt;&lt;2,相当于a=a*4</span></span><br><span class="line">&gt;&gt;&gt;a         <span class="comment"># 二进制 101000</span></span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure>

<h2 id="其他运算符："><a href="#其他运算符：" class="headerlink" title="其他运算符："></a>其他运算符：</h2><blockquote>
<p>同一性测试运算符</p>
<p>成员运算符</p>
</blockquote>
<h3 id="同一性测试运算符："><a href="#同一性测试运算符：" class="headerlink" title="同一性测试运算符："></a>同一性测试运算符：</h3><p>包括：is 和 is not。is 判断是否为同一对象，is not判断是否为不同对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a=<span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;b=<span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">-----------<span class="comment"># 测试is 和 == 之间的区别</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hi</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age,b)</span>:</span></span><br><span class="line">        self.age=age</span><br><span class="line">        self.b=b</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self,other)</span>:</span>  <span class="comment"># 比较方法</span></span><br><span class="line">        <span class="keyword">if</span> self.age==other.age <span class="keyword">and</span> self.b==other.b:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">h1=hi(<span class="number">12</span>,<span class="number">2</span>)</span><br><span class="line">h2=hi(<span class="number">12</span>,<span class="number">2</span>)</span><br><span class="line">print(h1 <span class="keyword">is</span> h2)</span><br><span class="line">print(h1 == h2)</span><br><span class="line">print(h1 <span class="keyword">is</span> <span class="keyword">not</span> h2)</span><br><span class="line">--------------</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># is 比较的是同一对象，而==比较的是对象内容</span></span><br></pre></td></tr></table></figure>

<h3 id="成员运算符："><a href="#成员运算符：" class="headerlink" title="成员运算符："></a>成员运算符：</h3><p>用来测试一个序列对象中是否包括某一个元素。包括：in 和 not in。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">6</span> <span class="keyword">not</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h2 id="运算符优先级："><a href="#运算符优先级：" class="headerlink" title="运算符优先级："></a>运算符优先级：</h2><p><a href="https://imgchr.com/i/16PqNd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/06/16PqNd.png" alt="16PqNd.png"></a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>数据</title>
    <url>/2020/02/08/%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>python的数据相关内容</p>
<a id="more"></a>
<h2 id="python中的数据类型："><a href="#python中的数据类型：" class="headerlink" title="python中的数据类型："></a>python中的数据类型：</h2><ul>
<li>数字</li>
<li>字符串<h3 id="数字："><a href="#数字：" class="headerlink" title="数字："></a>数字：</h3>python中的数字类型有四种：整数类型，浮点数类型，复数类型和布尔类型。<h4 id="整数类型："><a href="#整数类型：" class="headerlink" title="整数类型："></a>整数类型：</h4>整数类型为int，最大范围只受计算机硬件的限制。默认情况下是以十进制表示。<br>二进制数：以0b或0B为前缀（0是数字0）<br>八进制数：以0o或0O为前缀（第一个字符是数字0，第二个是字母o）<br>十六进制数：以 0x或0X为前缀（0是数字0）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">28</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0b11100</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0o34</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0x1C</span></span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure>
<h4 id="浮点类型："><a href="#浮点类型：" class="headerlink" title="浮点类型："></a>浮点类型：</h4>python只支持双精度浮点数类型，而且与本机相关。浮点类型可以用小数表示，也可以用科学计数法表示，如e2表示10^2^ 。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">1.0</span></span><br><span class="line"><span class="number">1.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0.0</span></span><br><span class="line"><span class="number">0.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3.36e2</span></span><br><span class="line"><span class="number">336.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1.56e-2</span></span><br><span class="line"><span class="number">0.0156</span></span><br></pre></td></tr></table></figure>
<h4 id="复数类型："><a href="#复数类型：" class="headerlink" title="复数类型："></a>复数类型：</h4>python中的复数类型为complex。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">1</span>+<span class="number">2j</span></span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line">&gt;&gt;&gt;(<span class="number">1</span>+<span class="number">2j</span>)+(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line">(<span class="number">2</span>+<span class="number">4j</span>)</span><br></pre></td></tr></table></figure>
<h4 id="布尔类型："><a href="#布尔类型：" class="headerlink" title="布尔类型："></a>布尔类型：</h4>python中布尔类型为bool，是int的子集，它只有True和False两个值。非0为真，0为假。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;bool(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;bool(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;bool(<span class="number">2</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;bool(<span class="string">''</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;bool(<span class="string">' '</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;bool([])</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;bool(&#123;&#125;)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h4 id="数字类型的相互转换："><a href="#数字类型的相互转换：" class="headerlink" title="数字类型的相互转换："></a>数字类型的相互转换：</h4><h5 id="隐式转换："><a href="#隐式转换：" class="headerlink" title="隐式转换："></a>隐式转换：</h5><table>
<thead>
<tr>
<th>类型1</th>
<th>类型2</th>
<th>结果类型</th>
</tr>
</thead>
<tbody><tr>
<td>布尔</td>
<td>整数</td>
<td>整数</td>
</tr>
<tr>
<td>布尔，整数</td>
<td>浮点</td>
<td>浮点</td>
</tr>
<tr>
<td><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a=<span class="number">1</span>+<span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line"><span class="number">2</span>  <span class="comment"># 默认True为1</span></span><br><span class="line">&gt;&gt;&gt;a=<span class="number">1.0</span>+<span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line">&gt;&gt;&gt;a=<span class="number">1.0</span>+<span class="number">1</span>+<span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line"><span class="number">3.0</span></span><br></pre></td></tr></table></figure></td>
<td></td>
<td></td>
</tr>
<tr>
<td>##### 显式转换：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>运用int(),float(),bool()函数，分别转换为整数类型，浮点类型和布尔类型。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;int(<span class="number">2.3</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;float(<span class="number">23</span>)</span><br><span class="line"><span class="number">23.0</span></span><br><span class="line">&gt;&gt;&gt;bool(<span class="number">2</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;int(<span class="literal">True</span>)</span><br><span class="line"><span class="number">1</span>  <span class="comment"># 默认为1</span></span><br><span class="line">&gt;&gt;&gt;int(<span class="literal">False</span>)</span><br><span class="line"><span class="number">0</span>  <span class="comment"># 默认为0</span></span><br></pre></td></tr></table></figure></td>
<td></td>
<td></td>
</tr>
<tr>
<td>### 字符串：</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<p>python中的字符串类型为str。字符串是有顺序的，从左到右，由0开始索引。</p>
<h4 id="字符串的表示方式："><a href="#字符串的表示方式：" class="headerlink" title="字符串的表示方式："></a>字符串的表示方式：</h4><ol>
<li>普通字符串用单引号(‘)或双引号(“)包裹起来。</li>
<li>原始字符串(raw string)：在普通字符串前面加r，字符串中的特殊媳妇不需要转义</li>
<li>长字符串：字符串中包含了换行，缩进等排版字符，可以用三重单引号(‘’’)或三重双引号(“””)包裹起来。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;print(<span class="string">"hi"</span>)</span><br><span class="line">hi</span><br><span class="line">&gt;&gt;&gt;print(<span class="string">r'sd/r\r'</span>)</span><br><span class="line">sd/r\r  </span><br><span class="line">&gt;&gt;&gt;print(<span class="string">'sd/r\r'</span>)</span><br><span class="line">sd/r  <span class="comment">#  "\r"是表示回车的转义字符串</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">'''asd   asdasd'''</span>)</span><br><span class="line">asd   asdasd</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>转义字符串表格</strong><br>|字符表示|Unicode编码|说明|<br>|—|—|—|<br>|\t|\u0009|水平制表符|<br>|\n|\u000a|换行|<br>|\r|\u000d|回车|<br>|&quot;|\u0022|双引号|<br>|&#39;|\u0027|单引号|<br>|\\ |\u005c|反斜杠|</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;print(<span class="string">'ko\nko'</span>)</span><br><span class="line">ko</span><br><span class="line">ko</span><br><span class="line">&gt;&gt;&gt;print(<span class="string">"sd's"</span>)</span><br><span class="line">sd<span class="string">'s</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;print('</span>sd<span class="string">'s'</span>)</span><br><span class="line">结果报错</span><br><span class="line">&gt;&gt;&gt;print(<span class="string">'sd\'s'</span>)</span><br><span class="line">sd<span class="string">'s</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;print("sd\u005c")</span></span><br><span class="line"><span class="string">sd\</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串格式化："><a href="#字符串格式化：" class="headerlink" title="字符串格式化："></a>字符串格式化：</h4><p>在实际编程中，需要将其他类型变量与字符串拼接到一起使用，例如数字保留到小数点后四位，数字需要右对齐等。<br>字符串的格式化需要用到字符串的format()方法以及占位符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a=<span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">"他的年龄是&#123;&#125;"</span>.format(a))</span><br><span class="line">他的年龄是<span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;a=<span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;name=<span class="string">"jay"</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">"&#123;&#125;的年龄是&#123;&#125;"</span>.format(name,a))</span><br><span class="line">jay的年龄是<span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>{}就是占位符，配合format()函数使用，将后面的数据填充到占位符中。<br>占位符还包括格式化控制符，可对字符串的格式进行更加精准的控制。<br><strong>字符串控制符表</strong><br>|控制符|说明|<br>|—|:—|<br>|s|字符串格式化|<br>|d|十进制整数|<br>|f,F|十进制浮点数|<br>|g,G|十进制整数或者浮点数|<br>|e,E|科学计数法表示浮点数|<br>|o|八进制整数|<br>|x,X|十六进制整数|<br>格式化控制符位于占位符索引或占位符名字后面，之间用冒号间隔，例如{1:d}表示索引为1的占位符格式参数是十进制整数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;name=<span class="string">'jay'</span></span><br><span class="line">&gt;&gt;&gt;age=<span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">"&#123;0&#125;的年龄是&#123;1:d&#125;"</span>.format(name,age))</span><br><span class="line">jay的年龄是<span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">"&#123;1&#125;的年龄是&#123;0:5d&#125;"</span>.format(age,name))</span><br><span class="line">jay的年龄是   <span class="number">18</span>  <span class="comment"># &#123;&#125;中的数字表示format中的顺序，从0开始索引，5d中的5表示输出长度是5的字符串。</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">"&#123;5d&#125;"</span>.format(age))</span><br><span class="line">结果报错</span><br><span class="line">&gt;&gt;&gt;print(<span class="string">"&#123;0:5d&#125;"</span>.format(age))</span><br><span class="line">   <span class="number">18</span>  <span class="comment">#在控制符前需要有索引</span></span><br><span class="line">&gt;&gt;&gt;mon=<span class="number">123.45</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">"&#123;0:.1f&#125;"</span>.format(mon))</span><br><span class="line"><span class="number">123.5</span>   <span class="comment"># .1f表示精确到小数点后一位,且四舍五入</span></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">"&#123;0:e&#125;"</span>.format(mon))</span><br><span class="line"><span class="number">1.234500e+02</span>    <span class="comment"># e+02表示10^2</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串查找："><a href="#字符串查找：" class="headerlink" title="字符串查找："></a>字符串查找：</h4><p>在给定的子字符串中查找子字符串，可用find和rfind方法，找到就返回查找子字符串所在位置的，没有就返回-1.</p>
<ol>
<li>str.find(a,b,c),a表示需要的字符或字符串，b表示开始的位置，c表示结束的位置。b和c可以省略，如果全部省略就是查遍整个字符串。如果找到，就返回找到的字符串相应的最左端位置的索引，没有就返回-1.</li>
<li>str.rfind(a,b,c),与find相似，不同的是找到就返回最右端的索引值。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;h=<span class="string">"hi jack,i am rose"</span></span><br><span class="line">&gt;&gt;&gt;h.find(<span class="string">"i"</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;h.find(<span class="string">"z"</span>)</span><br><span class="line"><span class="number">-1</span></span><br><span class="line">&gt;&gt;&gt;h.find(<span class="string">"am"</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;h.rfind(<span class="string">"i"</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="comment"># hi jack,i am rose</span></span><br><span class="line">  <span class="number">0123456789.</span>......</span><br><span class="line">  索引从<span class="number">0</span>开始</span><br></pre></td></tr></table></figure>
<h4 id="字符串和数字相互转换："><a href="#字符串和数字相互转换：" class="headerlink" title="字符串和数字相互转换："></a>字符串和数字相互转换：</h4></li>
<li>字符串转换为数字：<br>使用int()和float()函数：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;float(<span class="string">'9.6'</span>)</span><br><span class="line"><span class="number">9.6</span></span><br></pre></td></tr></table></figure></li>
<li>数字转换为字符串：<br>使用str()函数：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;str(<span class="number">12</span>)</span><br><span class="line"><span class="string">'12'</span></span><br></pre></td></tr></table></figure>
如果要将数字格式化在转换，可以使用之前所说的format函数：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">'&#123;0:2d&#125;'</span>.format(<span class="number">12</span>)</span><br><span class="line">  <span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">'&#123;0:.2f&#125;'</span>.format(<span class="number">12</span>)</span><br><span class="line"><span class="number">12.00</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>语法基础</title>
    <url>/2020/02/08/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="python语法基础"><a href="#python语法基础" class="headerlink" title="python语法基础"></a>python语法基础</h2><a id="more"></a>
<h4 id="标识符："><a href="#标识符：" class="headerlink" title="标识符："></a>标识符：</h4><p>标识符就是变量，常量，函数等等的命名，有着一些规范要求：</p>
<ol>
<li>区分大小写</li>
<li>首字符不能是数字</li>
<li>关键字不能作为标识符</li>
<li>不能使用内部函数作为标识符</li>
</ol>
<p><strong>关键字</strong><img src="http://i2.tiimg.com/707416/b80e066b9692d2fe.png" alt="Markdown"></p>
<h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><p>Python的注释使用符号 #，#位于注释行的开头，#与要注释行首字符之间要有一个空格。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print("hi")</span></span><br></pre></td></tr></table></figure>
<p>另：在PyCharm和Sublim Text工具中，注释可以使用快捷键：选择一行或者多行代码，然后按住<kbd>Ctrl+斜杠</kbd>进行注释，去除注释也可以这样。</p>
<h4 id="语句："><a href="#语句：" class="headerlink" title="语句："></a>语句：</h4><p>语句是代码的执行过程。在语句结束后不需要加上分号等其他符号，且python的语句书写规范十分严格。在冒号的下一行书写时一定要有<kbd>Tab</kbd>的位置等等。python的语句执行也是按照语句的缩进格式进行判断的<br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">(Tab )print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">(Tab )print(b)<span class="comment"># 在判断时执行</span></span><br><span class="line">print(<span class="string">"Da"</span>)<span class="comment"># 出了判断语句if后执行</span></span><br><span class="line">--------------------</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi</span><span class="params">()</span>:</span></span><br><span class="line">(Tab )print(<span class="string">"A"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="模块："><a href="#模块：" class="headerlink" title="模块："></a>模块：</h4><p>python中一个模块就是一个文件，模块是保存代码的最小单位，模块中可以申明变量，常量，函数等等。一个模块也可提供访问另一个模块的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">模块一 h1.py</span><br><span class="line">z=<span class="number">1</span></span><br><span class="line">y=<span class="number">2</span></span><br><span class="line">print(y)</span><br><span class="line">----------------------</span><br><span class="line">模块二 h2.py</span><br><span class="line"><span class="keyword">from</span> h1 <span class="keyword">import</span> z</span><br><span class="line">print(z)<span class="comment"># 访问模块一的参数z</span></span><br></pre></td></tr></table></figure>
<p>如果要访问其他模块，需要用到<strong>import+&lt;模块名/文件名&gt;</strong>，如果单单引用一个元素或者函数可以用<strong>from &lt;模块名/文件名&gt; import &lt;元素/函数名&gt;</strong></p>
<h4 id="包："><a href="#包：" class="headerlink" title="包："></a>包：</h4><p>由于命名的限制，同一个文件夹中的文件名不能重复，我们可以通过使用<strong>包</strong>来避免模块名重复的问题。通俗来说<strong>包</strong>就是一个文件夹加上一个<strong>init</strong>.py文件。推荐使用PyCharm来创建，具体步骤：使用pychram打开创建的项目，右击项目选择<strong>New-&gt;Python Package菜单</strong>，在弹出的对话框中输入包名“com.pkg”。如果要导入包中的模块，可以使用<strong>import &lt;包名.模块名&gt;</strong>，也可以添加from来引出特定元素或者函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.pkg.h1</span><br><span class="line">print(h1.z)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python简介</title>
    <url>/2020/02/08/python%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="python语言特点："><a href="#python语言特点：" class="headerlink" title="python语言特点："></a>python语言特点：</h3><ol>
<li>简单易学</li>
<li>面向对象</li>
<li>解释性好</li>
<li>免费开源</li>
<li>可移植性好</li>
<li>胶水语言</li>
</ol>
<a id="more"></a>

<blockquote>
<p>python的标准版本是由C语言编译的，可以作为连接其他语言编写的软件的组件或模块，借助于C语言，python几乎可以驱动所有已知的软件<br>7. 库–丰富<br>python中拥有丰富的库，调用其中的函数可以极大的方便编程<br>8. 动态类型–使用方便</p>
</blockquote>
<h3 id="python语言应用前景"><a href="#python语言应用前景" class="headerlink" title="python语言应用前景"></a>python语言应用前景</h3><ol>
<li>桌面应用的开发</li>
<li>Web应用的开发</li>
<li>自动化运维</li>
<li>科学计算</li>
<li>数据可视性</li>
<li>网络爬虫</li>
<li>人工智能</li>
<li>大数据</li>
<li>游戏开发<h3 id="python学习网址"><a href="#python学习网址" class="headerlink" title="python学习网址"></a>python学习网址</h3></li>
<li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400" target="_blank" rel="noopener">廖雪峰python</a></li>
<li><a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a><h3 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h3></li>
<li>语法基础:<ul>
<li>标识符</li>
<li>注释</li>
<li>语句</li>
<li>模块</li>
<li>包</li>
</ul>
</li>
<li>数据：<ul>
<li>数字</li>
<li>字符串</li>
</ul>
</li>
<li>运算符</li>
<li>控制语句：<ul>
<li>if</li>
<li>while</li>
<li>for</li>
<li>break/continue</li>
</ul>
</li>
<li>数据结构：<ul>
<li>元组</li>
<li>列表</li>
<li>字典</li>
</ul>
</li>
<li>函数：<ul>
<li>函数定义</li>
<li>函数参数</li>
<li>函数返回值</li>
<li>函数变量</li>
<li>生成器</li>
<li>嵌套函数</li>
<li>附</li>
</ul>
</li>
<li>面向对象编程：<ul>
<li>类和对象</li>
<li>面向对象的基本特征–封装性</li>
<li>面向对象的基本特征–继承性</li>
<li>面向对象的基本特征–多态性</li>
<li>Pthon根类–object</li>
<li>枚举类</li>
</ul>
</li>
<li>异常处理：<ul>
<li>异常问题</li>
<li>捕获异常</li>
<li>释放资源</li>
<li>自定义异常/显示抛出异常</li>
</ul>
</li>
<li>常用模块：<ul>
<li>math模块</li>
<li>random模块</li>
<li>datetime模块</li>
<li>logging模块</li>
<li>hashlib加密模块</li>
</ul>
</li>
<li>正则表达式：<ul>
<li>字符串</li>
<li>元字符</li>
<li>量词</li>
<li>分词</li>
<li>re模块</li>
</ul>
</li>
<li>正则表达式常用功能</li>
<li>python文件：<ul>
<li>文件操作</li>
<li>os模块</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>关于中华武术与外国武术的认知</title>
    <url>/2020/01/15/%E5%85%B3%E4%BA%8E%E4%B8%AD%E5%8D%8E%E6%AD%A6%E6%9C%AF%E4%B8%8E%E5%A4%96%E5%9B%BD%E6%AD%A6%E6%9C%AF%E7%9A%84%E8%AE%A4%E7%9F%A5/</url>
    <content><![CDATA[<h3 id="中国武术与外国武术的对抗"><a href="#中国武术与外国武术的对抗" class="headerlink" title="中国武术与外国武术的对抗"></a>中国武术与外国武术的对抗</h3><p><img src="http://i2.tiimg.com/707416/b5aa7bcd1deb6ae4.jpg" alt="Markdown"></p>
<a id="more"></a>
<p><strong><em>内容摘要:主要谈论中国武术的发展以及为何对抗不过外国武术</em></strong></p>
<h4 id="中国武术的发展："><a href="#中国武术的发展：" class="headerlink" title="中国武术的发展："></a>中国武术的发展：</h4><p><a href="https://baike.baidu.com/item/中国武术/1446959?fr=aladdin" target="_blank" rel="noopener"><font color=blue>百度百科中国武术</font></a><br>&emsp;&emsp;中国武术有着悠久的历史，最早是由祖先们为了生活狩猎与自我防御，进行的一系列攻击手段。在部落战争中，人们也在不断地打斗中逐渐完善个人的武术技巧，这些武术动作也是被不断模仿与传承。<br>&emsp;&emsp;到了后来的奴隶社会，为了迎合战争的需要，武术教育被大力推行，武术也在这时候逐渐形成。而到了商周时期，武术随着社会的重视，相关教育也是愈发完善。相传在周时期出现了中国武术史上极为重要的作品《周易》(也称《易经》)，这本书中不光光有着“一阴一阳为之道”的养生之道，也有着“易有太级，是生两仪，两仪生四象，四象生八卦”，产生了太级学说。再到春秋时期，诸侯争霸，习武之人得到了各诸侯的重视。尤其是剑道，随着冶炼技术的发展，剑的种类变多，质量变好，剑道得到了空前的发展。<br>&emsp;&emsp;到了封建时期，舞剑等武术偏艺术性的表演开始出现与发展。沿途卖艺的师傅中也是出现了各种武艺表演。在汉唐宋元时期，武术还没有特定的门派。到了明清时期，是武术的发展的一大高潮。流派林立，拳种纷显。拳术有长拳、猴拳、少林拳、内家拳等几十家之多；同时形成了太极拳，形意拳，八卦拳等主要的拳种体系。<br>&emsp;&emsp;到了近代，中国武术的发展在前人的基础之上，传承与发扬。同时国家建有各种武术会馆，以及举办各种武术比赛进行武术交流与学习。<br><img src="http://i1.fuimg.com/707416/50d1f8c2a9cb5596.jpg" alt="Markdown"></p>
<h4 id="中国武术的内涵："><a href="#中国武术的内涵：" class="headerlink" title="中国武术的内涵："></a>中国武术的内涵：</h4><p>&emsp;&emsp;上武得道，平天下；中武入喆，安身心；下武精技，防侵害。中国武术的定义往往是“止戈为武”，这与中国古代的“和为贵”的精神相符，经历过古时候是纷乱战争，中国人更偏向于大一统时的繁荣安定。<br>&emsp;&emsp;同样中国武术中有很大一部分是倾向于“强身健体”而非“竞技争强”，太极中的“阴阳调和”思想便贯穿了中医理论。所谓的“气功”，也只是调节身体机理的一大助力。<br>&emsp;&emsp;同样，中国武术也有属于自己的自信，各大武术门派的争相斗争，也是为了证明自己的强大之处。对于外国武术的入侵，中国武术也是以自己独特的魅力与之对比。不骄不躁的武术之道，也是中国武术的一大魅力。</p>
<h4 id="中国武术的门派种类："><a href="#中国武术的门派种类：" class="headerlink" title="中国武术的门派种类："></a>中国武术的门派种类：</h4><p><a href="https://zhidao.baidu.com/question/50940455.html" target="_blank" rel="noopener"><font color=blue>中国武术种类</font></a><br><a href="https://zhidao.baidu.com/question/31701575.html" target="_blank" rel="noopener"><font color=blue>中国武术门派</font></a><br>&emsp;&emsp;主要门派有：少林派，武当派，峨嵋派，南拳门，崆峒派，华山派，昆仑派，青城派等等。<br>&emsp;&emsp;到了近代，最出名的还是佛山的咏春拳。</p>
<h4 id="外国武术的种类："><a href="#外国武术的种类：" class="headerlink" title="外国武术的种类："></a>外国武术的种类：</h4><p><a href="https://zhidao.baidu.com/question/454507577982654525.html" target="_blank" rel="noopener"><font color=blue>外国武术的种类</font></a><br>&emsp;&emsp;外国的著名武术主要有泰国泰拳、日本空手道、韩国跆拳道、蒙古搏克、巴西柔术、日本合气道等。</p>
<h4 id="中国武术是否不适合现代竞技？"><a href="#中国武术是否不适合现代竞技？" class="headerlink" title="中国武术是否不适合现代竞技？"></a>中国武术是否不适合现代竞技？</h4><p>&emsp;&emsp;众所周知，中国武术更偏向于防身健体，随着中国的快速发展，中国的武术传承也是大大不如外国人的专业练武。中国的武术发展可以说是落后了外国几代人。关于武术的用途方面，中国传统武术或许已经被现代的武术竞技给淘汰。<br>&emsp;&emsp;但是上世纪的咏春拳似乎让人们看到了中国武术的出路，专注于实战的咏春拳，更偏向于直来直往，不同于中国传统武术的招式繁琐，通过实打实的木桩训练，爆发出个人最快的速度以及全身的力量。<br>&emsp;&emsp;近年来，中国武术随着电影的频繁拍摄又重现于国人的眼中，通过与外国武术的无数次对抗，中国武术中的柔软一面已被打到，但是其刚硬的一面却是能承受住来自现代竞技的压力。百变的武术技巧是让世界惊叹的不朽存在。<br><img src="http://i1.fuimg.com/707416/b65182aff6e0d3fe.jpg" alt="Markdown"></p>
<h4 id="中国武术为何打不过外国武术："><a href="#中国武术为何打不过外国武术：" class="headerlink" title="中国武术为何打不过外国武术："></a>中国武术为何打不过外国武术：</h4><p>&emsp;&emsp;个人认为，中国武术的内涵首先决定了它的使用方面，中国很大一部分的武术本就不适应于现代的外国武术竞技之中，这是两种不同侧重面的武术，也是就是毫无比较性可言。<br>&emsp;&emsp;其次，中国武术更加讲究武术技巧，调动自己全身的力量进行打斗，以及做出各种反应动作。而外国武术更讲究“一力降十会”，他们通过各种锻炼方式将自己的肉体变得更加强大，肌肉力量与反应速度得到了空前的提升。<br>&emsp;&emsp;事实上外国人的身体素质本来就比中国人好上不少，再进行系统的锻炼以后，身体素质可是比中国人强上很多倍，而中国的练武之人的锻炼方法，不如外国人那样强劲，效果自然不及他人，一上一下的差距使得中国武术的实战效果不如人意。这也正是中国武术为什么在与中国人对打时的表现与和外国武术较量时的表现相差甚大的原因所在。<br>&emsp;&emsp;还有就是中国武术的时效性很长，中国武术的习武之人需要通过长时间的不断练习才能掌握一门武术的精髓，而外国武术的简单粗暴的优势就显现了出来，试想一个正值壮年的人与与一个年龄偏大的人对打，年龄上的差距带来的是身体力量和素质上的差距。往往中国武术还没打到对面几下，对面一拳就能打出重伤的效果，实在让人难以承受。</p>
<h4 id="关于中国武术的发展前景展望："><a href="#关于中国武术的发展前景展望：" class="headerlink" title="关于中国武术的发展前景展望："></a>关于中国武术的发展前景展望：</h4><p>&emsp;&emsp;中国武术拥有着世界上极其少有的精妙的武术技巧,这是中国武术的一大优势所在.但是本身的身体素质的劣势极大程度上限制了中国武术的表现.或许中国习武之人需要更多的借鉴外国武术的锻炼身体的方式,增强自身的身体素质,同时每日刻苦学习中国武术的精髓之处,将技巧与力量完美结合起来,这样才能让中国武术在世界上真正展示它的魅力与实力.<br><img src="http://i1.fuimg.com/707416/f8284a645d5638ea.png" alt="Markdown"></p>
]]></content>
      <categories>
        <category>文化</category>
      </categories>
      <tags>
        <tag>文化</tag>
        <tag>武术</tag>
      </tags>
  </entry>
  <entry>
    <title>影评《叶问4》</title>
    <url>/2020/01/06/%E5%BD%B1%E8%AF%84/</url>
    <content><![CDATA[<h3 id="《叶问4》观后的个人看法"><a href="#《叶问4》观后的个人看法" class="headerlink" title="《叶问4》观后的个人看法"></a><center>《叶问4》观后的个人看法</center></h3><p><img src="http://i2.tiimg.com/707416/50b6aa57bb0d1790.jpg" alt="Markdown"></p>
<a id="more"></a>
<h4 id="IP-MAN-也会老去"><a href="#IP-MAN-也会老去" class="headerlink" title="IP MAN 也会老去"></a>IP MAN 也会老去</h4><p>&emsp;当叶问在旧金山出场的那一刻，他已经老了。他看向正值青春的李小龙时，嘴角是上扬的，那是他年轻的模样。此时的叶问身负癌症，年事已高，体力大不如前。在与美国军官大开大合的打斗之中，叶问的力量明显小了，喘息也更多了。虽说最终仍是叶问获胜，但是英雄迟暮的沧桑让人热泪盈眶。<br>&emsp;叶问从不认为自己是一个英雄，他只知道自己是一个习武之人，“路遇不平事，当拔刀相助”，习武之人的侠义之气也不会随着他的年龄的增大而逐渐隐去。叶问同样是一个拥有民族大义之人，也有护家的小爱。在一个经济开始发展的时代，他愿意付出自己的所有为了自己的孩子。在一个华人备受歧视的地方，他也愿意为了民族尊严毅然单枪赴会。<br>&emsp;可年老的叶问回想起自己过去种种打斗，当时意气风发，“我要打十个”，当时体力充沛，单挑拳王，当时不会想到现在的无力，在回忆中打下了自己的咏春。或许把结局留给叶问自己是最好的选择。有人说来看《叶问4》也只是为了情怀，毕竟叶问已经出来了十一年了。可是最后的结局却让人久久不愿离场。叶问当年的回忆何尝不是观众的记忆。我们记忆中那个无所不能的咏春-叶问老去了，他打败了一切侮辱武术和中国的敌人，却败给了生活的病痛。一代宗师的落幕，怎不叫人神伤。</p>
<h4 id="不屈的民族"><a href="#不屈的民族" class="headerlink" title="不屈的民族"></a>不屈的民族</h4><p>&emsp;从《叶问1》开始，叶问便是代表这中国武术功夫，向日本人发出挑战，他不能忍受“东亚病夫”的侮辱，不能接受日本对中国的侮辱。再后来的《叶问2》英国拳王个人对中国功夫的侮辱，更是打死了“洪胖子”，叶问也是出于捍卫中华武术的立场，为洪胖子报仇雪恨。而《叶问3》中格局会小一点，从咏春门派的争论出发，但依旧离不开民族问题。到最后的《叶问4》叶问挑战美国军官。叶问从没有在民族问题上忍受，“你有没有试着去用武术改变别人对中国的看法”，叶问想到的是用武术让侮辱中国的人明白，中国是一个不屈的民族！<br>&emsp;在《叶问4》中，那些生活在唐人街而自以为是的功夫师傅们，竟然被军官简简单单给打败怎么都不能让人接受，但仔细想想却也正常。当时的习武之人已经忘记了实战的概念，他们更喜欢在中秋晚会上的精彩表演。这是民族的劣性和屈从性吗？我想这是民族自带的安逸性。中国人骨子里还是遵循着“和为贵”的民本思想。少林功夫也不过是强身健体。在中国危急关头练武之人自然为了杀敌而练就一身本领，而生活在唐人街的人们，生活安逸，练武也只是生活的一部分。他们被轻松打败也是情有可原。但是他们拒绝教“洋人”功夫，也正是对他人的反抗。他们虽然以“忍”为核心，不去惹事，却也不想完全听从外国人的话。到了最后万宗华说的“我和你打”，也正是不屈的民族精神的觉醒。<br><img src="http://i2.tiimg.com/707416/e96ac9a91623b260.jpg" alt="Markdown"></p>
<h4 id="中华功夫片的结尾"><a href="#中华功夫片的结尾" class="headerlink" title="中华功夫片的结尾"></a>中华功夫片的结尾</h4><p>&emsp;上个世纪的人已经老去了，新时代的人正茁壮成长；上个世纪也要走到尽头了。从黄飞鸿，到霍元甲，再到叶问，我们熟悉的功夫片是以中华传统功夫为根本拍摄的，那些一代宗师们，以不屈的民族精神挑战来自各方的歧视与偏见。可以说功夫片是上个世纪的代表作品，他揭示着中华民族的不屈精神，促进国民的精神觉醒。但是到了新世纪，中国的快速发展赢得了越来越多的国家的尊敬，随着改革开放的发展，中国与其他国家的相互交流，新时代文化以潮流为领头，追逐着异国风情，追逐着“现代文化”。现代的年轻人也是更偏向于现代生活主题的影片，或者战斗激烈的战争片等等，唯独少了传统的功夫片。<br>&emsp;这里也许就会有人开始反驳了，说“我们没有放弃功夫片，我们只是将功夫融入了武打片，这样更精彩，要与时俱进”。在这里，我不做任何评价，因为我只是单单想讨论一下功夫片。<br>&emsp;这是一个不争的事实，“现在能吃苦又能打的人不多见了”。现在人们生活愈发方便，人们的身体素质却在下降，或者说是生活理念的上升让他们抗拒辛苦的劳动。功夫巨星们都渐渐老去，而后面的人都在迎合着市场的需求或追求自己的影视价值。功夫片再也不会像原来那样吸引人们，它原本神秘的外表也被现代科学所揭开。而民族大义在人们安居乐业之际绝不会涌上心头。<br>&emsp;这已经不单单是演员和导演的问题了，这更代表了功夫片时代的结束。</p>
]]></content>
      <categories>
        <category>文化</category>
      </categories>
      <tags>
        <tag>文化</tag>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>click-gz.github.io</title>
    <url>/2020/01/06/click-gz-github-io/</url>
    <content><![CDATA[<h2 id="关于初次搭建hexo所遇见的“坑”"><a href="#关于初次搭建hexo所遇见的“坑”" class="headerlink" title="关于初次搭建hexo所遇见的“坑”"></a>关于初次搭建hexo所遇见的“坑”</h2><p><img src="http://i1.fuimg.com/707416/61381eb176f1251d.jpg" alt="Markdown"></p>
<p><strong><em>这是我第一次写的博客，本以为能够很快搭建出来，但是过程中却是出现了许多问题，这些问题也是教程上没有提及的，我想做一下小小的总结。</em></strong></p>
<p>我参考的教程：<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener"><font color=blue>知乎</font></a></p>
<p>这篇文章的总体还是很全面的，从获取git到搭建好博客后的优化等。但正是因为它过于范化，其实里面许多东西没有具体讨论，对于我这个小白来说，简直就是一把辛酸泪。</p>
<a id="more"></a>
<p>一：</p>
<ol>
<li>在下载文章中所提到的软件时，一定要注意它的<strong>下载地址*3</strong>（重要的事说三遍）。如果你不是在同一个盘里下载的软件，那你就得面临无数次的转换cmd的调用路径。这是我在进行搭建博客中遇到的最大的两个坑之一。git与Node.js是在一次培训授课上下载好的，当时脑子一热，将这两个下载到了不同的盘中。一开始调用cmd时也没有注意，直接使用了npm命令安装Hexo，结果之后的操作根本完成不了。<br><img src="http://i2.tiimg.com/707416/b7fa0a93b5712161.jpg" alt="Markdown"><br>如果是因为不在同一个盘中的话，他最后会提示你的需要操作的盘在哪，我们只需要通过改变cmd的调用路径就行。<a href="https://zhidao.baidu.com/question/171628709.html" target="_blank" rel="noopener"><font color=blue>点击查看调整cmd的路径详解</font></a></li>
<li>如果出现了一中的问题，那么恭喜你，接下来还得在往深里走。安装好了Hexo后，跟这教程走，进行博客的初始生成和服务预览，然后在cmd中你会惊喜的发现：<img src="http://i1.fuimg.com/707416/4fd1019fb0399087.png" alt="Markdown">没错，和之前遇到的一模一样，因为你没有在blog的文件夹中调用。所以你需要再进一步，将路径设置到文件夹blog中进行操作。之后应该就能顺利的生成本地地址了。</li>
</ol>
<p>二：</p>
<ol>
<li>一定要严格按照教程中的<strong>输入格式</strong>进行书写。因为他说的都是对的(我不要你以为，我要我以为)。类似于什么仓库名啊，<strong>一定</strong>要注意。我反正是因为仓库名不老老实实按着教程写，重写了三个仓库。。（汗颜）</li>
<li>没错了，这就是我的第二大坑，眼神不好惹的祸，不怪我。，。</li>
</ol>
<p>三：<br>关于Hexo的主题的话，因为刚刚开始，我也没什么心思多搞这个东西，但是教程是真的水，我也是只是弄了他说的一个主题，如果想要弄其他的还得再去看看怎么弄~<br><del>要期末了，我却在玩电脑，对不起我的考试！！！</del></p>
<p>四：<br>关于再添加新的文章内容，我这里是将用markdown新写的md文件放在了blog-source-_posts里面就行了。如果需要修改的话，就是只需要修改原有的md文件。修改添加之后只需要打开当前目录的命令框，输入<kbd>hexo d -g</kbd>根据提示走就行了。</p>
<p>五：<br>更改内容时一定要查清楚是否可以修改，自己的修改结果是否合理。举一个例子：<a href="https://www.cnblogs.com/mmzuo-798/p/10510225.html" target="_blank" rel="noopener">改变timezone</a>\<br>没错，我改了这个，结果半个小时没改回来。。。。</p>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
